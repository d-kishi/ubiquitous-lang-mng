using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;
using Microsoft.FSharp.Core;
using Moq;
using Xunit;
using UbiquitousLanguageManager.Application;
using UbiquitousLanguageManager.Domain;
using UbiquitousLanguageManager.Infrastructure.Services;

namespace UbiquitousLanguageManager.Tests.Infrastructure;

/// <summary>
/// AuthenticationService パスワードリセット機能のテストクラス
/// 
/// 【F#初学者向け解説】
/// Phase A3で実装したパスワードリセット機能の単体テスト。
/// ADR_013テストファースト開発に従い、実装前にテストケースを作成。
/// 
/// 🔐 セキュリティ機能のため、境界値・エラーケースを網羅的にテスト
/// 📊 ADR_008準拠: ログ出力の検証も含む
/// </summary>
public class AuthenticationServicePasswordResetTests
{
    private readonly Mock<Microsoft.Extensions.Logging.ILogger<AuthenticationService>> _loggerMock;
    private readonly Mock<UserManager<IdentityUser>> _userManagerMock;
    private readonly Mock<INotificationService> _notificationServiceMock;
    private readonly Mock<IUserRepository> _userRepositoryMock;
    private readonly AuthenticationService _authenticationService;

    /// <summary>
    /// テスト初期化
    /// </summary>
    /// <remarks>
    /// 🔧 Blazor Server・F#初学者向け解説:
    /// UserManager<IdentityUser>のモック作成は複雑なため、専用のヘルパーメソッドを使用
    /// </remarks>
    public AuthenticationServicePasswordResetTests()
    {
        _loggerMock = new Mock<Microsoft.Extensions.Logging.ILogger<AuthenticationService>>();
        _userManagerMock = CreateUserManagerMock();
        _notificationServiceMock = new Mock<INotificationService>();
        _userRepositoryMock = new Mock<IUserRepository>();

        _authenticationService = new AuthenticationService(
            _loggerMock.Object,
            _userManagerMock.Object,
            _notificationServiceMock.Object,
            _userRepositoryMock.Object);
    }

    #region RequestPasswordResetAsync Tests

    /// <summary>
    /// パスワードリセット要求 - 正常ケース
    /// </summary>
    [Fact]
    public async Task RequestPasswordResetAsync_ValidUser_ShouldSucceed()
    {
        // Arrange
        var email = Email.Create("test@example.com").Value;
        var identityUser = new IdentityUser { Email = email.Value, EmailConfirmed = true };
        var resetToken = "valid_reset_token_123";

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync(identityUser);
        _userManagerMock.Setup(x => x.IsEmailConfirmedAsync(identityUser))
            .ReturnsAsync(true);
        _userManagerMock.Setup(x => x.GeneratePasswordResetTokenAsync(identityUser))
            .ReturnsAsync(resetToken);
        _notificationServiceMock.Setup(x => x.SendPasswordResetEmailAsync(
                It.IsAny<Email>(), It.IsAny<string>(), It.IsAny<string>()))
            .ReturnsAsync(FSharpResult<Unit, string>.NewOk(null));

        // Act
        var result = await _authenticationService.RequestPasswordResetAsync(email);

        // Assert
        Assert.True(result.IsOk);
        
        // 📧 メール送信が呼ばれたことを検証
        _notificationServiceMock.Verify(x => x.SendPasswordResetEmailAsync(
            email, It.IsAny<string>(), It.IsAny<string>()), Times.Once);
            
        // 📊 ADR_008準拠: 適切なログ出力を検証
        VerifyLogCalled(LogLevel.Information, "Password reset requested");
        VerifyLogCalled(LogLevel.Information, "Password reset email sent successfully");
    }

    /// <summary>
    /// パスワードリセット要求 - 存在しないユーザー（セキュリティ考慮）
    /// </summary>
    [Fact]
    public async Task RequestPasswordResetAsync_NonExistentUser_ShouldSucceedSecurely()
    {
        // Arrange
        var email = Email.Create("nonexistent@example.com").Value;
        
        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync((IdentityUser)null);

        // Act
        var result = await _authenticationService.RequestPasswordResetAsync(email);

        // Assert
        // 🔐 セキュリティ考慮: 存在しないユーザーでも成功として返す（アカウント列挙攻撃対策）
        Assert.True(result.IsOk);
        
        // 📮 メール送信は呼ばれないことを検証
        _notificationServiceMock.Verify(x => x.SendPasswordResetEmailAsync(
            It.IsAny<Email>(), It.IsAny<string>(), It.IsAny<string>()), Times.Never);
            
        // 📊 セキュリティログが出力されることを検証
        VerifyLogCalled(LogLevel.Warning, "Password reset requested for non-existent user");
    }

    /// <summary>
    /// パスワードリセット要求 - メール未確認ユーザー
    /// </summary>
    [Fact]
    public async Task RequestPasswordResetAsync_UnconfirmedEmail_ShouldFail()
    {
        // Arrange
        var email = Email.Create("unconfirmed@example.com").Value;
        var identityUser = new IdentityUser { Email = email.Value, EmailConfirmed = false };

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync(identityUser);
        _userManagerMock.Setup(x => x.IsEmailConfirmedAsync(identityUser))
            .ReturnsAsync(false);

        // Act
        var result = await _authenticationService.RequestPasswordResetAsync(email);

        // Assert
        Assert.True(result.IsError);
        Assert.Contains("メール確認が完了していない", result.ErrorValue);
        
        // 📮 メール送信は呼ばれないことを検証
        _notificationServiceMock.Verify(x => x.SendPasswordResetEmailAsync(
            It.IsAny<Email>(), It.IsAny<string>(), It.IsAny<string>()), Times.Never);
    }

    /// <summary>
    /// パスワードリセット要求 - メール送信失敗
    /// </summary>
    [Fact]
    public async Task RequestPasswordResetAsync_EmailSendFails_ShouldReturnError()
    {
        // Arrange
        var email = Email.Create("test@example.com").Value;
        var identityUser = new IdentityUser { Email = email.Value, EmailConfirmed = true };
        
        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync(identityUser);
        _userManagerMock.Setup(x => x.IsEmailConfirmedAsync(identityUser))
            .ReturnsAsync(true);
        _userManagerMock.Setup(x => x.GeneratePasswordResetTokenAsync(identityUser))
            .ReturnsAsync("token");
        _notificationServiceMock.Setup(x => x.SendPasswordResetEmailAsync(
                It.IsAny<Email>(), It.IsAny<string>(), It.IsAny<string>()))
            .ReturnsAsync(FSharpResult<Unit, string>.NewError("SMTP connection failed"));

        // Act
        var result = await _authenticationService.RequestPasswordResetAsync(email);

        // Assert
        Assert.True(result.IsError);
        Assert.Contains("メール送信中にエラー", result.ErrorValue);
        
        // 📊 エラーログが出力されることを検証
        VerifyLogCalled(LogLevel.Error, "Failed to send password reset email");
    }

    #endregion

    #region ResetPasswordAsync Tests

    /// <summary>
    /// パスワードリセット実行 - 正常ケース
    /// </summary>
    [Fact]
    public async Task ResetPasswordAsync_ValidTokenAndPassword_ShouldSucceed()
    {
        // Arrange
        var email = Email.Create("test@example.com").Value;
        var token = "dGVzdF90b2tlbg=="; // Base64UrlEncoded "test_token"
        var newPassword = Password.Create("NewSecurePass123!").Value;
        var identityUser = new IdentityUser { Email = email.Value };

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync(identityUser);
        _userManagerMock.Setup(x => x.ResetPasswordAsync(identityUser, "test_token", newPassword.Value))
            .ReturnsAsync(IdentityResult.Success);
        _userManagerMock.Setup(x => x.UpdateSecurityStampAsync(identityUser))
            .ReturnsAsync(IdentityResult.Success);
        _notificationServiceMock.Setup(x => x.SendPasswordResetConfirmationAsync(email))
            .ReturnsAsync(FSharpResult<Unit, string>.NewOk(null));

        // Act
        var result = await _authenticationService.ResetPasswordAsync(email, token, newPassword);

        // Assert
        Assert.True(result.IsOk);
        
        // 🔄 セキュリティスタンプ更新が呼ばれたことを検証
        _userManagerMock.Verify(x => x.UpdateSecurityStampAsync(identityUser), Times.Once);
        
        // 📧 確認メール送信が呼ばれたことを検証
        _notificationServiceMock.Verify(x => x.SendPasswordResetConfirmationAsync(email), Times.Once);
        
        // 📊 成功ログが出力されることを検証
        VerifyLogCalled(LogLevel.Information, "Password reset completed successfully");
    }

    /// <summary>
    /// パスワードリセット実行 - 存在しないユーザー
    /// </summary>
    [Fact]
    public async Task ResetPasswordAsync_NonExistentUser_ShouldFail()
    {
        // Arrange
        var email = Email.Create("nonexistent@example.com").Value;
        var token = "dGVzdF90b2tlbg==";
        var newPassword = Password.Create("NewSecurePass123!").Value;

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync((IdentityUser)null);

        // Act
        var result = await _authenticationService.ResetPasswordAsync(email, token, newPassword);

        // Assert
        Assert.True(result.IsError);
        Assert.Contains("無効なリセット要求", result.ErrorValue);
        
        // 📊 警告ログが出力されることを検証
        VerifyLogCalled(LogLevel.Warning, "Password reset attempted for non-existent user");
    }

    /// <summary>
    /// パスワードリセット実行 - 無効なトークン形式
    /// </summary>
    [Fact]
    public async Task ResetPasswordAsync_InvalidTokenFormat_ShouldFail()
    {
        // Arrange
        var email = Email.Create("test@example.com").Value;
        var invalidToken = "invalid_base64_token!@#";
        var newPassword = Password.Create("NewSecurePass123!").Value;
        var identityUser = new IdentityUser { Email = email.Value };

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync(identityUser);

        // Act
        var result = await _authenticationService.ResetPasswordAsync(email, invalidToken, newPassword);

        // Assert
        Assert.True(result.IsError);
        Assert.Contains("無効または期限切れ", result.ErrorValue);
        
        // 📊 警告ログが出力されることを検証
        VerifyLogCalled(LogLevel.Warning, "Invalid token format in password reset");
    }

    /// <summary>
    /// パスワードリセット実行 - Identity リセット失敗（トークン期限切れ等）
    /// </summary>
    [Fact]
    public async Task ResetPasswordAsync_IdentityResetFails_ShouldReturnUserFriendlyError()
    {
        // Arrange
        var email = Email.Create("test@example.com").Value;
        var token = "dGVzdF90b2tlbg==";
        var newPassword = Password.Create("NewSecurePass123!").Value;
        var identityUser = new IdentityUser { Email = email.Value };

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync(identityUser);
        
        // ASP.NET Core Identity リセット失敗をシミュレート
        var identityErrors = new[]
        {
            new IdentityError { Code = "InvalidToken", Description = "Invalid token." }
        };
        _userManagerMock.Setup(x => x.ResetPasswordAsync(identityUser, "test_token", newPassword.Value))
            .ReturnsAsync(IdentityResult.Failed(identityErrors));

        // Act
        var result = await _authenticationService.ResetPasswordAsync(email, token, newPassword);

        // Assert
        Assert.True(result.IsError);
        // 🎯 ADR_007準拠: ユーザーフレンドリーなエラーメッセージに変換されることを確認
        Assert.Contains("リセットトークンが無効または期限切れ", result.ErrorValue);
        
        // 📊 警告ログが出力されることを検証
        VerifyLogCalled(LogLevel.Warning, "Password reset failed");
    }

    #endregion

    #region ValidatePasswordResetTokenAsync Tests

    /// <summary>
    /// パスワードリセットトークン検証 - 有効なトークン
    /// </summary>
    [Fact]
    public async Task ValidatePasswordResetTokenAsync_ValidToken_ShouldReturnTrue()
    {
        // Arrange
        var email = Email.Create("test@example.com").Value;
        var token = "dGVzdF90b2tlbg==";
        var identityUser = new IdentityUser { Email = email.Value };

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync(identityUser);
        _userManagerMock.Setup(x => x.VerifyUserTokenAsync(
                identityUser, 
                It.IsAny<string>(), 
                "ResetPassword", 
                "test_token"))
            .ReturnsAsync(true);

        // Act
        var result = await _authenticationService.ValidatePasswordResetTokenAsync(email, token);

        // Assert
        Assert.True(result.IsOk);
        Assert.True(result.ResultValue);
        
        // 📊 Debug ログが出力されることを検証
        VerifyLogCalled(LogLevel.Debug, "Password reset token validation");
    }

    /// <summary>
    /// パスワードリセットトークン検証 - 存在しないユーザー
    /// </summary>
    [Fact]
    public async Task ValidatePasswordResetTokenAsync_NonExistentUser_ShouldReturnFalse()
    {
        // Arrange
        var email = Email.Create("nonexistent@example.com").Value;
        var token = "dGVzdF90b2tlbg==";

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync((IdentityUser)null);

        // Act
        var result = await _authenticationService.ValidatePasswordResetTokenAsync(email, token);

        // Assert
        Assert.True(result.IsOk);
        Assert.False(result.ResultValue);
    }

    /// <summary>
    /// パスワードリセットトークン検証 - 無効なトークン形式
    /// </summary>
    [Fact]
    public async Task ValidatePasswordResetTokenAsync_InvalidTokenFormat_ShouldReturnFalse()
    {
        // Arrange
        var email = Email.Create("test@example.com").Value;
        var invalidToken = "invalid_token_format";
        var identityUser = new IdentityUser { Email = email.Value };

        _userManagerMock.Setup(x => x.FindByEmailAsync(email.Value))
            .ReturnsAsync(identityUser);

        // Act
        var result = await _authenticationService.ValidatePasswordResetTokenAsync(email, invalidToken);

        // Assert
        Assert.True(result.IsOk);
        Assert.False(result.ResultValue);
        
        // 📊 Debug ログが出力されることを検証
        VerifyLogCalled(LogLevel.Debug, "Token decode failed in validation");
    }

    #endregion

    #region Helper Methods

    /// <summary>
    /// UserManager<IdentityUser> のモックを作成
    /// </summary>
    /// <remarks>
    /// UserManager のコンストラクタが複雑なため、専用のヘルパーメソッドを使用
    /// </remarks>
    private static Mock<UserManager<IdentityUser>> CreateUserManagerMock()
    {
        var store = new Mock<IUserStore<IdentityUser>>();
        var mgr = new Mock<UserManager<IdentityUser>>(
            store.Object, null, null, null, null, null, null, null, null);
        mgr.Object.UserValidators.Add(new UserValidator<IdentityUser>());
        mgr.Object.PasswordValidators.Add(new PasswordValidator<IdentityUser>());
        return mgr;
    }

    /// <summary>
    /// ログ出力の検証ヘルパーメソッド
    /// </summary>
    /// <param name="expectedLevel">期待するログレベル</param>
    /// <param name="expectedMessage">期待するメッセージの一部</param>
    /// <remarks>
    /// 📊 ADR_008準拠: ログ出力の検証
    /// </remarks>
    private void VerifyLogCalled(LogLevel expectedLevel, string expectedMessage)
    {
        _loggerMock.Verify(
            x => x.Log(
                expectedLevel,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString().Contains(expectedMessage)),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception, string>>()),
            Times.AtLeastOnce);
    }

    #endregion
}