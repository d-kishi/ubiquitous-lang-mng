@page "/reset-password"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using UbiquitousLanguageManager.Contracts.Interfaces
@using UbiquitousLanguageManager.Web.Pages.Admin.Components
@inject IPasswordResetService PasswordResetService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<ResetPassword> Logger

@* パスワードリセット実行画面 *@
@* Phase A3機能: 仕様書2.1.3パスワードリセット機能準拠 *@

<PageTitle>パスワードリセット - ユビキタス言語管理システム</PageTitle>

<div class="reset-password-container">
    <div class="reset-password-card">
        <div class="reset-password-header">
            <div class="logo-section">
                <i class="fas fa-lock fa-3x text-primary mb-3"></i>
                <h2 class="text-center mb-1">新しいパスワードの設定</h2>
                <p class="text-center text-muted">安全なパスワードを設定してください</p>
            </div>
        </div>
        
        <div class="reset-password-body">
            @if (!isResetCompleted)
            {
                @if (isValidToken == null)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">トークンを検証しています...</span>
                        </div>
                        <p class="text-muted mt-2">リセットトークンを検証しています...</p>
                    </div>
                }
                else if (isValidToken == false)
                {
                    <div class="text-center">
                        <div class="error-icon mb-3">
                            <i class="fas fa-times-circle fa-4x text-danger"></i>
                        </div>
                        <h4 class="text-danger mb-3">無効なリンク</h4>
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            このリセットリンクは無効です。期限切れか、既に使用済みの可能性があります。
                        </div>
                        <div class="mt-4">
                            <a href="/forgot-password" class="btn btn-primary">
                                <i class="fas fa-redo me-2"></i>
                                新しいリセットリンクを申請する
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <EditForm Model="@resetPasswordModel" OnValidSubmit="@HandleResetPassword">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-4">
                            <div class="alert alert-info" role="alert">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>パスワード要件:</strong><br>
                                • 8文字以上<br>
                                • 英数字を含むこと<br>
                                • 大文字を含むことを推奨
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">
                                <i class="fas fa-key me-1"></i>
                                新しいパスワード
                            </label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-lock"></i>
                                </span>
                                <InputText id="newPassword" 
                                           type="@(showPassword ? "text" : "password")"
                                           class="@($"form-control {GetValidationClass("NewPassword")}")" 
                                           @bind-Value="resetPasswordModel.NewPassword" 
                                           placeholder="新しいパスワードを入力"
                                           autocomplete="new-password" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                    <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" class="text-danger small" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">
                                <i class="fas fa-key me-1"></i>
                                パスワード確認
                            </label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-check"></i>
                                </span>
                                <InputText id="confirmPassword" 
                                           type="@(showConfirmPassword ? "text" : "password")"
                                           class="@($"form-control {GetValidationClass("ConfirmPassword")}")" 
                                           @bind-Value="resetPasswordModel.ConfirmPassword" 
                                           placeholder="パスワードを再入力"
                                           autocomplete="new-password" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="ToggleConfirmPasswordVisibility">
                                    <i class="fas @(showConfirmPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" class="text-danger small" />
                        </div>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @errorMessage
                            </div>
                        }
                        
                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                }
                                パスワードを変更
                            </button>
                        </div>
                    </EditForm>
                }
            }
            else
            {
                <div class="text-center">
                    <div class="success-icon mb-3">
                        <i class="fas fa-check-circle fa-4x text-success"></i>
                    </div>
                    <h4 class="text-success mb-3">パスワード変更完了</h4>
                    <div class="alert alert-success" role="alert">
                        <i class="fas fa-shield-alt me-2"></i>
                        パスワードが正常に変更されました。新しいパスワードでログインしてください。
                    </div>
                    <div class="mt-4">
                        <a href="/login" class="btn btn-primary btn-lg">
                            <i class="fas fa-sign-in-alt me-2"></i>
                            ログイン画面へ
                        </a>
                    </div>
                </div>
            }
            
            <div class="reset-password-footer mt-4">
                <div class="text-center">
                    <a href="/login" class="text-decoration-none">
                        <i class="fas fa-arrow-left me-1"></i>
                        ログイン画面に戻る
                    </a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="security-notice">
        <small class="text-muted">
            <i class="fas fa-shield-alt me-1"></i>
            パスワード変更はセキュリティ監査のため記録されます。
        </small>
    </div>
</div>

@* Toast Notifications *@
<ToastNotification @ref="toastNotification" Position="ToastNotification.ToastPosition.TopCenter" />

@code {
    private ResetPasswordModel resetPasswordModel = new();
    private bool isLoading = false;
    private bool isResetCompleted = false;
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool? isValidToken = null;
    private string errorMessage = string.Empty;
    private ToastNotification? toastNotification;
    
    [Parameter] [SupplyParameterFromQuery] public string? Token { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? Email { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        // URLパラメータの確認
        if (string.IsNullOrWhiteSpace(Token) || string.IsNullOrWhiteSpace(Email))
        {
            isValidToken = false;
            return;
        }
        
        resetPasswordModel.Email = Email;
        resetPasswordModel.Token = Token;
        
        // トークンの有効性確認
        await ValidateResetToken();
    }
    
    private async Task ValidateResetToken()
    {
        try
        {
            var result = await PasswordResetService.ValidateResetTokenAsync(Email!, Token!);
            
            if (result.IsSuccess)
            {
                isValidToken = result.Value;
            }
            else
            {
                isValidToken = false;
                errorMessage = result.Error ?? "トークンの検証に失敗しました。";
            }
        }
        catch (Exception ex)
        {
            isValidToken = false;
            errorMessage = $"トークン検証中にエラーが発生しました: {ex.Message}";
        }
        
        StateHasChanged();
    }
    
    private async Task HandleResetPassword()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();
        
        try
        {
            // 仕様書2.1.3準拠: パスワードリセット実行
            var result = await PasswordResetService.ResetPasswordAsync(
                resetPasswordModel.Email,
                resetPasswordModel.Token,
                resetPasswordModel.NewPassword);
            
            if (result.IsSuccess)
            {
                isResetCompleted = true;
                toastNotification?.ShowSuccess(
                    "パスワードが正常に変更されました", 
                    "変更完了");
                
                // セキュリティログ: パスワード変更記録
                LogPasswordReset();
                
                // 3秒後に自動的にログイン画面にリダイレクト
                await Task.Delay(3000);
                Navigation.NavigateTo("/login", replace: true);
            }
            else
            {
                errorMessage = result.Error ?? "パスワードリセットに失敗しました。";
                toastNotification?.ShowError("パスワードリセットに失敗しました", "変更エラー");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"パスワードリセット中にエラーが発生しました: {ex.Message}";
            toastNotification?.ShowError("パスワードリセットに失敗しました", "システムエラー");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void LogPasswordReset()
    {
        // Phase A3セキュリティログ: パスワード変更記録
        Logger.LogInformation("[SECURITY] Password reset completed Email: {MaskedEmail}", MaskEmail(resetPasswordModel.Email));
        
        // 実装予定:
        // - IP アドレスの記録
        // - パスワード変更履歴の記録
        // - セキュリティアラートの送信
        // - 他のセッションの無効化
    }

    /// <summary>
    /// メールアドレスの仮名化（セキュリティ配慮）
    /// </summary>
    private static string MaskEmail(string email)
    {
        if (string.IsNullOrEmpty(email) || !email.Contains('@'))
            return "***";

        var parts = email.Split('@');
        var local = parts[0];
        var domain = parts[1];

        if (local.Length <= 2)
            return $"{local[0]}***@{domain}";

        return $"{local.Substring(0, 2)}***@{domain}";
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
    
    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }
    
    private string GetValidationClass(string fieldName)
    {
        // Phase A3で実装: リアルタイムバリデーション
        return string.Empty;
    }
    
    // パスワードリセットモデル
    public class ResetPasswordModel : IValidatableObject
    {
        public string Email { get; set; } = string.Empty;
        public string Token { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "新しいパスワードは必須です")]
        [MinLength(8, ErrorMessage = "パスワードは8文字以上で入力してください")]
        [RegularExpression(@"^(?=.*[a-zA-Z])(?=.*\d).+$", ErrorMessage = "パスワードは英数字を含む必要があります")]
        public string NewPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "パスワード確認は必須です")]
        public string ConfirmPassword { get; set; } = string.Empty;
        
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (NewPassword != ConfirmPassword)
            {
                yield return new ValidationResult(
                    "パスワードが一致しません", 
                    new[] { nameof(ConfirmPassword) });
            }
        }
    }
}

<style>
    .reset-password-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1rem;
    }
    
    .reset-password-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 1rem;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        width: 100%;
        max-width: 500px;
        overflow: hidden;
    }
    
    .reset-password-header {
        background: rgba(255, 255, 255, 0.1);
        padding: 2rem 1.5rem 1rem;
        text-align: center;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .reset-password-body {
        padding: 2rem 1.5rem;
    }
    
    .logo-section h2 {
        font-weight: 700;
        color: #333;
    }
    
    .success-icon,
    .error-icon {
        animation: scaleIn 0.5s ease-out;
    }
    
    .form-control, .form-select {
        border-radius: 0.5rem;
        border: 1px solid #e1e5e9;
        padding: 0.75rem 1rem;
        transition: all 0.15s ease-in-out;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.25);
    }
    
    .input-group-text {
        background-color: #f8f9fa;
        border: 1px solid #e1e5e9;
        color: #6c757d;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: transform 0.15s ease-in-out;
    }
    
    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }
    
    .btn-primary:active {
        transform: translateY(0);
    }
    
    .security-notice {
        margin-top: 1.5rem;
        text-align: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 0.5rem;
        backdrop-filter: blur(5px);
    }
    
    /* アニメーション */
    .reset-password-card {
        animation: slideInUp 0.6s ease-out;
    }
    
    @@keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @@keyframes scaleIn {
        from {
            opacity: 0;
            transform: scale(0.5);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    /* レスポンシブ対応 */
    @@media (max-width: 576px) {
        .reset-password-card {
            margin: 1rem;
            max-width: none;
        }
        
        .reset-password-header,
        .reset-password-body {
            padding: 1.5rem 1rem;
        }
    }
    
    /* アクセシビリティ */
    @@media (prefers-reduced-motion: reduce) {
        .reset-password-card,
        .success-icon,
        .error-icon {
            animation: none;
        }
        
        .btn-primary:hover {
            transform: none;
        }
    }
</style>