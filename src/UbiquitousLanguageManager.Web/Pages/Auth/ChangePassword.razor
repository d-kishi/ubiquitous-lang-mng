@page "/change-password"
@layout MainLayout
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using UbiquitousLanguageManager.Infrastructure.Data.Entities
@using UbiquitousLanguageManager.Contracts.DTOs.Authentication
@using UbiquitousLanguageManager.Web.Services
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>パスワード変更 - ユビキタス言語管理システム</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center">
    <div class="row w-100">
        <div class="col-12 col-sm-8 col-md-6 col-lg-4 mx-auto">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white text-center">
                    <h4 class="mb-0">
                        <i class="fas fa-lock me-2"></i>
                        パスワード変更
                    </h4>
                </div>
                <div class="card-body p-4">
                    @if (isFirstLogin)
                    {
                        <div class="alert alert-warning" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>初回ログインです</strong><br />
                            セキュリティ強化のため、パスワードを変更してください。
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @successMessage
                        </div>
                    }

                    <EditForm Model="changePasswordModel" OnValidSubmit="HandleValidSubmit" novalidate>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">
                                <i class="fas fa-key me-1"></i>
                                現在のパスワード
                            </label>
                            <InputText id="currentPassword" 
                                      @bind-Value="changePasswordModel.CurrentPassword" 
                                      type="password" 
                                      class="form-control" 
                                      placeholder="現在のパスワードを入力してください"
                                      disabled="@isProcessing" />
                            <ValidationMessage For="() => changePasswordModel.CurrentPassword" class="text-danger small mt-1" />
                        </div>

                        <div class="mb-3">
                            <label for="newPassword" class="form-label">
                                <i class="fas fa-lock me-1"></i>
                                新しいパスワード
                            </label>
                            <InputText id="newPassword" 
                                      @bind-Value="changePasswordModel.NewPassword" 
                                      type="password" 
                                      class="form-control" 
                                      placeholder="新しいパスワードを入力してください"
                                      disabled="@isProcessing" />
                            <ValidationMessage For="() => changePasswordModel.NewPassword" class="text-danger small mt-1" />
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                パスワードは8文字以上で、大文字・小文字・数字をそれぞれ1文字以上含む必要があります
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">
                                <i class="fas fa-lock me-1"></i>
                                パスワード確認
                            </label>
                            <InputText id="confirmPassword" 
                                      @bind-Value="changePasswordModel.ConfirmPassword" 
                                      type="password" 
                                      class="form-control" 
                                      placeholder="新しいパスワードを再度入力してください"
                                      disabled="@isProcessing" />
                            <ValidationMessage For="() => changePasswordModel.ConfirmPassword" class="text-danger small mt-1" />
                        </div>

                        <div class="d-grid gap-2 mb-3">
                            <button type="submit" 
                                   class="btn btn-primary btn-lg" 
                                   disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>変更中...</span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <span>パスワードを変更する</span>
                                }
                            </button>
                        </div>

                        @if (!isFirstLogin)
                        {
                            <div class="text-center">
                                <button type="button" 
                                       class="btn btn-outline-secondary" 
                                       @onclick="CancelChanges"
                                       disabled="@isProcessing">
                                    <i class="fas fa-arrow-left me-2"></i>
                                    戻る
                                </button>
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // 【Blazor Server初学者向け解説】
    // フィールド定義：コンポーネントの状態を保持する変数群
    
    /// <summary>
    /// パスワード変更フォームのデータモデル
    /// DataAnnotations検証属性が自動的に適用される
    /// </summary>
    private ChangePasswordRequestDto changePasswordModel = new();
    
    /// <summary>
    /// フォーム処理中フラグ
    /// UI要素の無効化・ローディング表示に使用
    /// </summary>
    private bool isProcessing = false;
    
    /// <summary>
    /// 初回ログインフラグ
    /// 初回ログイン時は戻るボタンを非表示にし、警告メッセージを表示
    /// </summary>
    private bool isFirstLogin = false;
    
    /// <summary>
    /// エラーメッセージ
    /// パスワード変更失敗時に表示
    /// </summary>
    private string? errorMessage = null;
    
    /// <summary>
    /// 成功メッセージ
    /// パスワード変更成功時に表示
    /// </summary>
    private string? successMessage = null;

    /// <summary>
    /// Blazor Serverコンポーネントライフサイクル：初期化処理
    /// 【初学者向け解説】OnInitializedAsync は、コンポーネントが初期化される際に一度だけ実行されます。
    /// サーバーサイドでの非同期処理（データベースアクセス等）に適しています。
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 現在のユーザーが初回ログインかどうかを確認
            // AuthenticationService を通じて認証状態を取得
            isFirstLogin = AuthService.IsCurrentUserFirstLogin();
            
            await Task.CompletedTask; // 将来の拡張用
        }
        catch (Exception ex)
        {
            // エラーハンドリング：予期しない例外をキャッチ
            errorMessage = "初期化中にエラーが発生しました。ページを再読み込みしてください。";
            
            // ログ出力（実際の実装では ILogger を使用）
            Console.WriteLine($"ChangePassword初期化エラー: {ex.Message}");
        }
    }

    /// <summary>
    /// フォーム送信処理（バリデーション成功時）
    /// 【Blazor Server初学者向け解説】
    /// EditForm の OnValidSubmit イベントハンドラーです。
    /// DataAnnotations検証が成功した場合のみ実行されます。
    /// </summary>
    /// <param name="context">EditContext（フォームの状態情報）</param>
    private async Task HandleValidSubmit(EditContext context)
    {
        try
        {
            // 処理開始：UIを無効化
            isProcessing = true;
            errorMessage = null;
            successMessage = null;
            
            // StateHasChanged(): Blazor ServerでのUI再描画指示
            // 【初学者向け解説】サーバー側の状態変更をクライアントに通知し、UIを更新します
            StateHasChanged();

            // AuthenticationService でパスワード変更処理実行
            // F# Result型を使用したエラーハンドリング
            var result = await AuthService.ChangePasswordAsync(
                changePasswordModel.CurrentPassword, 
                changePasswordModel.NewPassword);
            
            // Result型のパターンマッチング処理
            // 【F#初学者向け解説】Result型は成功(Ok)または失敗(Error)を表現する関数型プログラミングのパターンです
            if (result.IsOk)
            {
                // 成功時の処理
                var successMsg = result.ResultValue;
                successMessage = successMsg;
                
                // フォームをリセット（セキュリティ強化）
                changePasswordModel = new ChangePasswordRequestDto();
                
                // UI更新
                StateHasChanged();
                
                // 成功メッセージ表示後、管理画面にリダイレクト
                // JavaScript相互運用でトースト通知
                await JSRuntime.InvokeVoidAsync("showSuccessToast", successMsg);
                
                // 2秒後にリダイレクト（ユーザーがメッセージを確認できる時間を確保）
                await Task.Delay(2000);
                Navigation.NavigateTo("/admin/users", forceLoad: true);
            }
            else
            {
                // 失敗時の処理
                var errorMsg = result.ErrorValue;
                errorMessage = errorMsg;
                
                // JavaScript相互運用でエラートースト通知
                await JSRuntime.InvokeVoidAsync("showErrorToast", errorMsg);
            }
        }
        catch (Exception ex)
        {
            // 予期しない例外の処理
            errorMessage = "パスワード変更処理中に予期しないエラーが発生しました。管理者にお問い合わせください。";
            
            // ログ出力
            Console.WriteLine($"ChangePassword処理エラー: {ex.Message}");
            
            // JavaScript相互運用でエラートースト通知
            await JSRuntime.InvokeVoidAsync("showErrorToast", errorMessage);
        }
        finally
        {
            // 処理終了：UIを有効化
            isProcessing = false;
            
            // StateHasChanged(): 最終的なUI状態の更新
            StateHasChanged();
        }
    }

    /// <summary>
    /// 戻るボタンクリック処理
    /// 【Blazor Server初学者向け解説】
    /// ボタンの @onclick イベントハンドラーです。
    /// 初回ログイン以外の場合に表示される戻るボタンの処理です。
    /// </summary>
    private void CancelChanges()
    {
        try
        {
            // NavigationManager: Blazor Serverでのページ遷移管理
            // forceLoad: true でサーバーサイドでの完全なページ読み込み
            Navigation.NavigateTo("/admin/users", forceLoad: true);
        }
        catch (Exception ex)
        {
            // ナビゲーション失敗時のフォールバック処理
            Console.WriteLine($"ナビゲーションエラー: {ex.Message}");
            errorMessage = "ページ遷移中にエラーが発生しました。";
            StateHasChanged();
        }
    }
}

@* 
【Blazor Server初学者向け総合解説】
このChangePassword.razorコンポーネントの主要な特徴：

1. ページ設定：
   - @page "/change-password": URLルーティング設定
   - @layout MainLayout: メインレイアウト使用
   - @attribute [Authorize]: 認証必須（未認証時は自動リダイレクト）

2. 依存性注入（@inject）：
   - AuthenticationService: パスワード変更処理
   - NavigationManager: ページ遷移管理  
   - IJSRuntime: JavaScript相互運用

3. レスポンシブデザイン：
   - Bootstrap 5クラス使用
   - col-12 col-sm-8 col-md-6 col-lg-4: 画面サイズ別レイアウト
   - vh-100 d-flex align-items-center: 中央配置

4. フォーム検証：
   - EditForm + DataAnnotationsValidator: 自動検証
   - ValidationMessage: 個別フィールドエラー表示
   - ValidationSummary: 全体エラー表示

5. ユーザビリティ：
   - 初回ログイン時の特別UI（戻るボタン非表示、警告表示）
   - 処理中のローディング表示・ボタン無効化
   - 成功・失敗メッセージの適切な表示
   - アイコン使用による視覚的分かりやすさ

6. セキュリティ：
   - [Authorize]属性による認証必須
   - フォームリセット（パスワード情報のクリア）
   - 入力フィールドの適切な type="password" 設定

7. エラーハンドリング：
   - try-catch による例外処理
   - F# Result型を使用したエラーハンドリング
   - ユーザーフレンドリーなエラーメッセージ

8. 状態管理：
   - isProcessing: UI無効化フラグ
   - isFirstLogin: 初回ログイン判定
   - StateHasChanged(): 手動UI更新指示

このコンポーネントは、Phase A7 Step2の要件を満たし、
FirstLoginRedirectMiddleware との連携準備も整っています。
*@