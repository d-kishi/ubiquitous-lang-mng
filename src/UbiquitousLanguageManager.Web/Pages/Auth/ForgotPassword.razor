@page "/forgot-password"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using UbiquitousLanguageManager.Contracts.Interfaces
@using UbiquitousLanguageManager.Web.Pages.Admin.Components
@inject IPasswordResetService PasswordResetService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@* パスワードリセット申請画面 *@
@* Phase A3機能: 仕様書2.1.3パスワードリセット機能準拠 *@

<PageTitle>パスワードリセット - ユビキタス言語管理システム</PageTitle>

<div class="forgot-password-container">
    <div class="forgot-password-card">
        <div class="forgot-password-header">
            <div class="logo-section">
                <i class="fas fa-key fa-3x text-primary mb-3"></i>
                <h2 class="text-center mb-1">パスワードリセット</h2>
                <p class="text-center text-muted">登録済みメールアドレスにリセットリンクを送信します</p>
            </div>
        </div>
        
        <div class="forgot-password-body">
            @if (!isRequestSent)
            {
                <EditForm Model="@forgotPasswordModel" OnValidSubmit="@HandleForgotPassword">
                    <DataAnnotationsValidator />
                    
                    <div class="mb-4">
                        <div class="alert alert-info" role="alert">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>パスワードリセット手順:</strong><br>
                            1. 登録済みメールアドレスを入力<br>
                            2. リセットリンクがメールで送信されます<br>
                            3. リンクをクリックして新しいパスワードを設定
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="email" class="form-label">
                            <i class="fas fa-envelope me-1"></i>
                            メールアドレス
                        </label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-at"></i>
                            </span>
                            <InputText id="email" 
                                       class="@($"form-control {GetValidationClass("Email")}")" 
                                       @bind-Value="forgotPasswordModel.Email" 
                                       placeholder="user@example.com"
                                       autocomplete="email" />
                        </div>
                        <ValidationMessage For="@(() => forgotPasswordModel.Email)" class="text-danger small" />
                    </div>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @errorMessage
                        </div>
                    }
                    
                    <div class="d-grid mb-3">
                        <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="fas fa-paper-plane me-2"></i>
                            }
                            リセットリンクを送信
                        </button>
                    </div>
                </EditForm>
            }
            else
            {
                <div class="text-center">
                    <div class="success-icon mb-3">
                        <i class="fas fa-check-circle fa-4x text-success"></i>
                    </div>
                    <h4 class="text-success mb-3">送信完了</h4>
                    <div class="alert alert-success" role="alert">
                        <i class="fas fa-envelope me-2"></i>
                        <strong>@forgotPasswordModel.Email</strong> にパスワードリセットのメールを送信しました。
                    </div>
                    <div class="alert alert-warning" role="alert">
                        <i class="fas fa-clock me-2"></i>
                        <strong>重要:</strong> リセットリンクの有効期限は<strong>24時間</strong>です。<br>
                        メールが届かない場合は、迷惑メールフォルダもご確認ください。
                    </div>
                </div>
            }
            
            <div class="forgot-password-footer mt-4">
                <div class="text-center">
                    <a href="/login" class="text-decoration-none">
                        <i class="fas fa-arrow-left me-1"></i>
                        ログイン画面に戻る
                    </a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="security-notice">
        <small class="text-muted">
            <i class="fas fa-shield-alt me-1"></i>
            パスワードリセット要求はセキュリティ監査のため記録されます。
        </small>
    </div>
</div>

@* Toast Notifications *@
<ToastNotification @ref="toastNotification" Position="ToastNotification.ToastPosition.TopCenter" />

@code {
    private ForgotPasswordModel forgotPasswordModel = new();
    private bool isLoading = false;
    private bool isRequestSent = false;
    private string errorMessage = string.Empty;
    private ToastNotification? toastNotification;
    
    private async Task HandleForgotPassword()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();
        
        try
        {
            // 仕様書2.1.3準拠: パスワードリセット申請処理
            var result = await PasswordResetService.RequestPasswordResetAsync(forgotPasswordModel.Email);
            
            if (result.IsSuccess)
            {
                isRequestSent = true;
                toastNotification?.ShowSuccess(
                    "パスワードリセットのメールを送信しました", 
                    "送信完了");
                
                // セキュリティログ: リセット申請記録
                LogPasswordResetRequest();
            }
            else
            {
                errorMessage = result.Error ?? "パスワードリセット申請に失敗しました。";
                toastNotification?.ShowError("パスワードリセット申請に失敗しました", "申請エラー");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"パスワードリセット申請中にエラーが発生しました: {ex.Message}";
            toastNotification?.ShowError("パスワードリセット申請に失敗しました", "システムエラー");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void LogPasswordResetRequest()
    {
        // Phase A3セキュリティログ: パスワードリセット要求記録
        Console.WriteLine($"[SECURITY] Password reset requested for: {forgotPasswordModel.Email}");
        
        // 実装予定:
        // - IP アドレスの記録
        // - リセット要求の頻度監視
        // - 不正な要求の検出
        // - セキュリティアラートの送信
    }
    
    private string GetValidationClass(string fieldName)
    {
        // Phase A3で実装: リアルタイムバリデーション
        return string.Empty;
    }
    
    // パスワードリセット申請モデル
    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "メールアドレスは必須です")]
        [EmailAddress(ErrorMessage = "正しいメールアドレス形式で入力してください")]
        public string Email { get; set; } = string.Empty;
    }
}

<style>
    .forgot-password-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1rem;
    }
    
    .forgot-password-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 1rem;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        width: 100%;
        max-width: 500px;
        overflow: hidden;
    }
    
    .forgot-password-header {
        background: rgba(255, 255, 255, 0.1);
        padding: 2rem 1.5rem 1rem;
        text-align: center;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .forgot-password-body {
        padding: 2rem 1.5rem;
    }
    
    .logo-section h2 {
        font-weight: 700;
        color: #333;
    }
    
    .success-icon {
        animation: scaleIn 0.5s ease-out;
    }
    
    .form-control, .form-select {
        border-radius: 0.5rem;
        border: 1px solid #e1e5e9;
        padding: 0.75rem 1rem;
        transition: all 0.15s ease-in-out;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.25);
    }
    
    .input-group-text {
        background-color: #f8f9fa;
        border: 1px solid #e1e5e9;
        color: #6c757d;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: transform 0.15s ease-in-out;
    }
    
    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }
    
    .btn-primary:active {
        transform: translateY(0);
    }
    
    .security-notice {
        margin-top: 1.5rem;
        text-align: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 0.5rem;
        backdrop-filter: blur(5px);
    }
    
    /* アニメーション */
    .forgot-password-card {
        animation: slideInUp 0.6s ease-out;
    }
    
    @@keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @@keyframes scaleIn {
        from {
            opacity: 0;
            transform: scale(0.5);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    /* レスポンシブ対応 */
    @@media (max-width: 576px) {
        .forgot-password-card {
            margin: 1rem;
            max-width: none;
        }
        
        .forgot-password-header,
        .forgot-password-body {
            padding: 1.5rem 1rem;
        }
    }
    
    /* アクセシビリティ */
    @@media (prefers-reduced-motion: reduce) {
        .forgot-password-card,
        .success-icon {
            animation: none;
        }
        
        .btn-primary:hover {
            transform: none;
        }
    }
</style>