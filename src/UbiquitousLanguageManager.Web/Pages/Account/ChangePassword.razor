@page "/Account/ChangePassword"
@using UbiquitousLanguageManager.Contracts.DTOs.Authentication
@using UbiquitousLanguageManager.Web.Services
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>パスワード変更 - ユビキタス言語管理システム</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title mb-0">
                    <i class="fas fa-key me-2"></i>
                    パスワード変更
                </h3>
            </div>
            <div class="card-body">
                @if (_isFirstLogin)
                {
                    <div class="alert alert-warning" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>初回ログインです。</strong><br />
                        セキュリティのため、パスワードを変更してください。
                    </div>
                }

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        @_errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        @_successMessage
                    </div>
                }

                <EditForm Model="_changePasswordRequest" OnValidSubmit="HandleChangePasswordAsync">
                    <DataAnnotationsValidator />
                    
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">現在のパスワード</label>
                        <InputText id="currentPassword" 
                                   type="password"
                                   @bind-value="_changePasswordRequest.CurrentPassword" 
                                   class="form-control"
                                   disabled="_isLoading" />
                        <ValidationMessage For="@(() => _changePasswordRequest.CurrentPassword)" />
                    </div>

                    <div class="mb-3">
                        <label for="newPassword" class="form-label">新しいパスワード</label>
                        <InputText id="newPassword" 
                                   type="password"
                                   @bind-value="_changePasswordRequest.NewPassword" 
                                   class="form-control"
                                   disabled="_isLoading" />
                        <ValidationMessage For="@(() => _changePasswordRequest.NewPassword)" />
                        <div class="form-text">
                            8文字以上で、大文字・小文字・数字をそれぞれ1文字以上含めてください。
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">パスワード確認</label>
                        <InputText id="confirmPassword" 
                                   type="password"
                                   @bind-value="_changePasswordRequest.ConfirmPassword" 
                                   class="form-control"
                                   disabled="_isLoading" />
                        <ValidationMessage For="@(() => _changePasswordRequest.ConfirmPassword)" />
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" 
                                class="btn btn-primary" 
                                disabled="_isLoading">
                            @if (_isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>変更中...</span>
                            }
                            else
                            {
                                <i class="fas fa-save me-2"></i>
                                <span>パスワードを変更</span>
                            }
                        </button>
                        
                        @if (!_isFirstLogin)
                        {
                            <button type="button" 
                                    class="btn btn-secondary" 
                                    @onclick="Cancel"
                                    disabled="_isLoading">
                                <i class="fas fa-times me-2"></i>
                                キャンセル
                            </button>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private ChangePasswordRequestDto _changePasswordRequest = new();
    private string? _errorMessage;
    private string? _successMessage;
    private bool _isLoading;
    private bool _isFirstLogin;

    /// <summary>
    /// パスワード変更処理
    /// </summary>
    private async Task HandleChangePasswordAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        _successMessage = null;
        StateHasChanged();

        try
        {
            var result = await AuthService.ChangePasswordAsync(_changePasswordRequest);
            
            if (result.IsSuccess)
            {
                _successMessage = "パスワードが正常に変更されました。";
                
                // 2秒後にホーム画面にリダイレクト
                await Task.Delay(2000);
                Navigation.NavigateTo("/");
            }
            else
            {
                _errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "システムエラーが発生しました。しばらく時間をおいて再度お試しください。";
            Console.WriteLine($"Change password error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// キャンセル処理
    /// </summary>
    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    /// <summary>
    /// ページ読み込み時の処理
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // 現在のユーザー情報を取得して初回ログインかチェック
        var currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            _isFirstLogin = currentUser.IsFirstLogin;
        }
        else
        {
            // 未認証の場合はログイン画面にリダイレクト
            Navigation.NavigateTo("/Account/Login");
        }
    }
}