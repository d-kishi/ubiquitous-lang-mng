@page "/Account/Login"
@using UbiquitousLanguageManager.Contracts.DTOs.Authentication
@using UbiquitousLanguageManager.Web.Services
@using UbiquitousLanguageManager.Web.Shared
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>ログイン - ユビキタス言語管理システム</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title mb-0">
                    <i class="fas fa-sign-in-alt me-2"></i>
                    ログイン
                </h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        @_errorMessage
                    </div>
                }

                <EditForm Model="_loginRequest" OnValidSubmit="HandleLoginAsync">
                    <DataAnnotationsValidator />
                    
                    <div class="mb-3">
                        <label for="email" class="form-label">メールアドレス</label>
                        <ValidatedInputText id="email" 
                                           @bind-value="_loginRequest.Email" 
                                           Icon="bi bi-envelope"
                                           Placeholder="example@company.com"
                                           HelpText="登録済みのメールアドレスを入力してください"
                                           disabled="_isLoading" />
                        <ValidationMessage For="@(() => _loginRequest.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">パスワード</label>
                        <ValidatedInputText id="password" 
                                           type="password"
                                           @bind-value="_loginRequest.Password" 
                                           Icon="bi bi-key"
                                           Placeholder="パスワードを入力"
                                           HelpText="8文字以上のパスワードを入力してください"
                                           disabled="_isLoading" />
                        <ValidationMessage For="@(() => _loginRequest.Password)" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="rememberMe" 
                                       @bind-value="_loginRequest.RememberMe" 
                                       class="form-check-input"
                                       disabled="_isLoading" />
                        <label class="form-check-label" for="rememberMe">
                            ログイン状態を保持する
                        </label>
                    </div>

                    <div class="d-grid">
                        <button type="submit" 
                                class="btn btn-primary" 
                                disabled="_isLoading">
                            @if (_isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>ログイン中...</span>
                            }
                            else
                            {
                                <i class="fas fa-sign-in-alt me-2"></i>
                                <span>ログイン</span>
                            }
                        </button>
                    </div>
                </EditForm>

                <hr class="my-4">
                
                <div class="text-center">
                    <small class="text-muted">
                        初期ユーザー: admin@ubiquitous-lang.com / TempPass123!
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequestDto _loginRequest = new();
    private string? _errorMessage;
    private bool _isLoading;

    /// <summary>
    /// ログイン処理
    /// 
    /// 【Blazor Server初学者向け解説】
    /// EditFormのOnValidSubmitイベントで呼び出されます。
    /// DataAnnotationsValidatorにより、サーバーサイドでバリデーションが実行された後に実行されます。
    /// </summary>
    private async Task HandleLoginAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        StateHasChanged(); // UI更新を即座に反映

        try
        {
            var result = await AuthService.LoginAsync(_loginRequest);
            
            if (result.IsSuccess)
            {
                // ログイン成功
                if (result.IsFirstLogin)
                {
                    // 初回ログインの場合はパスワード変更画面へ
                    Navigation.NavigateTo("/Account/ChangePassword");
                }
                else
                {
                    // 通常ログインの場合はホーム画面へ
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                // ログイン失敗
                _errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "システムエラーが発生しました。しばらく時間をおいて再度お試しください。";
            
            // 本番環境では詳細なエラー情報をログに記録し、ユーザーには一般的なメッセージのみ表示
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged(); // ローディング状態解除を反映
        }
    }

    /// <summary>
    /// ページ読み込み時の処理
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // 既にログイン済みの場合はホーム画面にリダイレクト
        var currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            Navigation.NavigateTo("/");
        }
    }
}