@page "/account/reset-password"
@using System.ComponentModel.DataAnnotations
@using UbiquitousLanguageManager.Application
@using UbiquitousLanguageManager.Domain
@using Microsoft.Extensions.Logging
@using UbiquitousLanguageManager.Contracts
@using UbiquitousLanguageManager.Web.Services
@inject IAuthenticationService AuthService
@inject Microsoft.Extensions.Logging.ILogger<ResetPassword> Logger
@inject NavigationManager Navigation

<PageTitle>パスワード再設定 - ユビキタス言語管理システム</PageTitle>

<div class="container-fluid d-flex justify-content-center align-items-center min-vh-100">
    <div class="card shadow-lg" style="width: 100%; max-width: 500px;">
        <div class="card-header text-center bg-success text-white">
            <h3 class="mb-0">
                <i class="fas fa-lock me-2"></i>
                パスワード再設定
            </h3>
        </div>
        
        <div class="card-body p-4">
            @* 🎯 ADR_010準拠: Blazor Server初学者向けコメント *@
            @* 【Blazor Server解説】 *@
            @* - OnInitializedAsync(): コンポーネント初期化時のクエリパラメータ取得 *@
            @* - クエリパラメータ: ?email=xxx&token=xxx形式でURLから情報を取得 *@
            
            @if (_isLoading)
            {
                @* 🔄 ローディング状態: トークン検証中の表示 *@
                <div class="text-center">
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">確認中...</span>
                    </div>
                    <p class="mt-2">リセットトークンを確認しています...</p>
                </div>
            }
            else if (!_isValidToken)
            {
                @* ❌ 無効トークン: エラー状態表示 *@
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        無効なリンクです
                    </h4>
                    <p>
                        このパスワードリセットリンクは無効または期限切れです。
                        以下の理由が考えられます：
                    </p>
                    <ul class="mb-0">
                        <li>リンクの有効期限（24時間）が切れている</li>
                        <li>既にパスワードが変更されている</li>
                        <li>リンクが不正に改変されている</li>
                    </ul>
                </div>
                
                <div class="d-grid gap-2 mt-3">
                    <button class="btn btn-primary" type="button" @onclick="RequestNewReset">
                        <i class="fas fa-redo me-2"></i>
                        新しいリセットメールを要求
                    </button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="BackToLogin">
                        <i class="fas fa-arrow-left me-2"></i>
                        ログイン画面に戻る
                    </button>
                </div>
            }
            else if (_resetCompleted)
            {
                @* ✅ リセット完了状態: 成功メッセージ表示 *@
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">
                        <i class="fas fa-check-circle me-2"></i>
                        パスワードを再設定しました
                    </h4>
                    <p class="mb-0">
                        パスワードの再設定が完了しました。
                        新しいパスワードでログインしてください。
                    </p>
                </div>
                
                <div class="d-grid">
                    <button class="btn btn-primary btn-lg" type="button" @onclick="BackToLogin">
                        <i class="fas fa-sign-in-alt me-2"></i>
                        ログインページへ
                    </button>
                </div>
            }
            else
            {
                @* 📝 パスワード設定フォーム *@
                <EditForm Model="_model" OnValidSubmit="HandleResetAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />
                    
                    @* ❌ エラーメッセージ表示（ADR_007準拠：ユーザーフレンドリーなメッセージ） *@
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @_errorMessage
                        </div>
                    }
                    
                    @* 📧 メールアドレス表示（確認用、読み取り専用） *@
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="fas fa-envelope me-2"></i>
                            アカウント
                        </label>
                        <input type="email" class="form-control-plaintext" 
                               readonly value="@_email" />
                        <div class="form-text">
                            このアカウントのパスワードを再設定します。
                        </div>
                    </div>
                    
                    @* 🔐 新しいパスワード入力 *@
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">
                            <i class="fas fa-key me-2"></i>
                            新しいパスワード
                        </label>
                        <InputText id="newPassword" type="password" 
                                   class="form-control form-control-lg"
                                   @bind-Value="_model.NewPassword"
                                   placeholder="新しいパスワードを入力"
                                   autocomplete="new-password" />
                        <ValidationMessage For="@(() => _model.NewPassword)" class="text-danger" />
                        <div class="form-text">
                            <i class="fas fa-info-circle me-1"></i>
                            8文字以上、英数字を含むパスワードを設定してください。
                        </div>
                    </div>
                    
                    @* 🔐 パスワード確認 *@
                    <div class="mb-4">
                        <label for="confirmPassword" class="form-label">
                            <i class="fas fa-check me-2"></i>
                            パスワード確認
                        </label>
                        <InputText id="confirmPassword" type="password" 
                                   class="form-control form-control-lg"
                                   @bind-Value="_model.ConfirmPassword"
                                   placeholder="パスワードを再入力"
                                   autocomplete="new-password" />
                        <ValidationMessage For="@(() => _model.ConfirmPassword)" class="text-danger" />
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-success btn-lg" disabled="@_isProcessing">
                            @* 🎯 Blazor Server: ボタン状態管理とユーザーフィードバック *@
                            @if (_isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                @:設定中...
                            }
                            else
                            {
                                <i class="fas fa-save me-2"></i>
                                @:パスワードを設定
                            }
                        </button>
                        
                        <button class="btn btn-outline-secondary" type="button" @onclick="BackToLogin">
                            <i class="fas fa-arrow-left me-2"></i>
                            ログイン画面に戻る
                        </button>
                    </div>
                </EditForm>
            }
        </div>
        
        <div class="card-footer text-center bg-light">
            <small class="text-muted">
                <i class="fas fa-shield-alt me-1"></i>
                セキュアなパスワード設定
            </small>
        </div>
    </div>
</div>

@code {
    // 📋 フォームモデル: バリデーション対応
    private ResetPasswordModel _model = new();
    private bool _isLoading = true;
    private bool _isProcessing = false;
    private bool _isValidToken = false;
    private bool _resetCompleted = false;
    private string? _errorMessage;
    private string _email = string.Empty;
    private string _token = string.Empty;
    
    /// <summary>
    /// パスワード再設定フォームモデル
    /// </summary>
    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "新しいパスワードは必須です")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "パスワードは8文字以上で入力してください")]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*?&]{8,}$", 
            ErrorMessage = "パスワードは英数字を含む8文字以上で設定してください")]
        [Display(Name = "新しいパスワード")]
        public string NewPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "パスワード確認は必須です")]
        [Compare(nameof(NewPassword), ErrorMessage = "パスワードが一致しません")]
        [Display(Name = "パスワード確認")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
    
    /// <summary>
    /// コンポーネント初期化処理
    /// </summary>
    /// <remarks>
    /// 🔄 Blazor Server: OnInitializedAsync()はコンポーネント初回レンダリング前に実行
    /// 📧 クエリパラメータ: URLからemail・token情報を取得
    /// 🔍 トークン検証: Application層でのトークン有効性確認
    /// </remarks>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 🌐 クエリパラメータ取得: URLパラメータの解析
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            
            _email = query["email"] ?? string.Empty;
            _token = query["token"] ?? string.Empty;
            
            // 📊 ADR_008準拠: コンポーネント初期化ログ
            Logger.LogDebug("ResetPassword component initialization. Email: {Email}, HasToken: {HasToken}", 
                _email, !string.IsNullOrEmpty(_token));
            
            if (string.IsNullOrEmpty(_email) || string.IsNullOrEmpty(_token))
            {
                // ❌ 必須パラメータ不足
                Logger.LogWarning("Missing required parameters for password reset. Email: {Email}, Token: {HasToken}", 
                    _email, !string.IsNullOrEmpty(_token));
                _isValidToken = false;
                _isLoading = false;
                return;
            }
            
            // 🔍 トークン有効性検証
            var emailValue = Email.create(_email);
            if (emailValue.IsError)
            {
                Logger.LogWarning("Invalid email format in reset password. Email: {Email}", _email);
                _isValidToken = false;
                _isLoading = false;
                return;
            }
            
            var validationResult = await AuthService.ValidatePasswordResetTokenAsync(emailValue.ResultValue, _token);
            
            if (validationResult.IsOk && validationResult.ResultValue)
            {
                // ✅ トークン有効
                _isValidToken = true;
                Logger.LogInformation("Password reset token validated successfully. Email: {Email}", _email);
            }
            else
            {
                // ❌ トークン無効
                _isValidToken = false;
                Logger.LogWarning("Invalid or expired password reset token. Email: {Email}, Error: {Error}", 
                    _email, validationResult.ErrorValue);
            }
        }
        catch (Exception ex)
        {
            // ❌ 初期化エラー
            Logger.LogError(ex, "Error during password reset component initialization. Email: {Email}", _email);
            _isValidToken = false;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    /// <summary>
    /// パスワード再設定処理
    /// </summary>
    /// <remarks>
    /// 🎯 ADR_007準拠: Result型によるエラーハンドリング
    /// 📊 ADR_008準拠: 構造化ログ出力（セキュリティログ）
    /// </remarks>
    private async Task HandleResetAsync()
    {
        // 📊 ADR_008準拠: セキュリティイベントログ（Information レベル）
        Logger.LogInformation("Password reset attempt initiated. Email: {Email}", _email);
        
        _isProcessing = true;
        _errorMessage = null;
        
        // ⚡ Blazor Server: UI更新通知 - 処理開始状態を即座に反映
        StateHasChanged();
        
        try
        {
            // 🔑 パスワード値オブジェクト作成
            var passwordResult = Password.create(_model.NewPassword);
            if (passwordResult.IsError)
            {
                _errorMessage = passwordResult.ErrorValue;
                Logger.LogWarning("Invalid password format in reset. Email: {Email}", _email);
                return;
            }
            
            var emailValue = Email.create(_email);
            if (emailValue.IsError)
            {
                _errorMessage = "システムエラーが発生しました。";
                Logger.LogError("Email validation failed during reset. Email: {Email}", _email);
                return;
            }
            
            // 🔐 Application層呼び出し: パスワードリセット実行
            var result = await AuthService.ResetPasswordAsync(emailValue.ResultValue, _token, passwordResult.ResultValue);
            
            if (result.IsOk)
            {
                // ✅ 成功: パスワードリセット完了
                _resetCompleted = true;
                Logger.LogInformation("Password reset completed successfully. Email: {Email}", _email);
                
                // 🔐 Step4: パスワードリセット完了後の自動ログイン実行
                try
                {
                    var autoLoginResult = await AuthService.AutoLoginAfterPasswordResetAsync(emailValue.ResultValue);
                    
                    if (autoLoginResult.IsOk)
                    {
                        Logger.LogInformation("Auto login after password reset successful. Email: {Email}", _email);
                        
                        // 🏠 自動ログイン成功: ダッシュボードにリダイレクト
                        await Task.Delay(2000); // 2秒間成功メッセージ表示
                        Navigation.NavigateTo("/admin/users", replace: true);
                    }
                    else
                    {
                        // ⚠️ 自動ログイン失敗: パスワードリセットは成功、手動ログインを促す
                        Logger.LogWarning("Auto login failed after password reset. Email: {Email}, Error: {Error}", 
                            _email, autoLoginResult.ErrorValue);
                        _errorMessage = "パスワード変更は完了しましたが、自動ログインに失敗しました。ログイン画面から手動でログインしてください。";
                    }
                }
                catch (Exception autoLoginEx)
                {
                    // ❌ 自動ログイン例外: パスワードリセットは成功
                    Logger.LogError(autoLoginEx, "Exception during auto login after password reset. Email: {Email}", _email);
                    _errorMessage = "パスワード変更は完了しました。ログイン画面から手動でログインしてください。";
                }
            }
            else
            {
                // ❌ 失敗: エラーメッセージ表示
                _errorMessage = TranslateErrorMessage(result.ErrorValue);
                Logger.LogWarning("Password reset failed. Email: {Email}, Error: {Error}", 
                    _email, result.ErrorValue);
            }
        }
        catch (Exception ex)
        {
            // ❌ 予期しないエラー: ADR_008準拠（Error レベル）
            Logger.LogError(ex, "Unexpected error during password reset. Email: {Email}", _email);
            
            // 🎯 ADR_007準拠: ユーザーフレンドリーなエラーメッセージ
            _errorMessage = "システムエラーが発生しました。しばらく待ってから再試行してください。";
        }
        finally
        {
            _isProcessing = false;
            
            // ⚡ Blazor Server: UI更新通知 - 処理完了状態を反映
            StateHasChanged();
        }
    }
    
    /// <summary>
    /// エラーメッセージの日本語化
    /// </summary>
    /// <remarks>
    /// 🎯 ADR_007準拠: ユーザーフレンドリーなエラーメッセージ変換
    /// </remarks>
    private string TranslateErrorMessage(string error)
    {
        return error switch
        {
            var msg when msg.Contains("invalid token") || msg.Contains("expired") => 
                "リセットトークンが無効または期限切れです。新しいリセット要求を行ってください。",
            var msg when msg.Contains("user not found") => 
                "ユーザーが見つかりません。",
            var msg when msg.Contains("password complexity") => 
                "パスワードが要件を満たしていません。8文字以上で英数字を含む必要があります。",
            _ => "パスワードの再設定中にエラーが発生しました。しばらく待ってから再試行してください。"
        };
    }
    
    /// <summary>
    /// 新しいリセット要求処理
    /// </summary>
    private void RequestNewReset()
    {
        Logger.LogDebug("User requested new password reset. Email: {Email}", _email);
        Navigation.NavigateTo("/account/forgot-password");
    }
    
    /// <summary>
    /// ログイン画面への戻り処理
    /// </summary>
    private void BackToLogin()
    {
        Logger.LogDebug("User navigated back to login from reset password page");
        Navigation.NavigateTo("/auth/login");
    }
}