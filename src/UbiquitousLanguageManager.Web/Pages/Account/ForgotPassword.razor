@page "/account/forgot-password"
@using System.ComponentModel.DataAnnotations
@using UbiquitousLanguageManager.Application
@using UbiquitousLanguageManager.Domain
@using Microsoft.Extensions.Logging
@using UbiquitousLanguageManager.Contracts
@using UbiquitousLanguageManager.Web.Services
@inject IAuthenticationService AuthService
@inject Microsoft.Extensions.Logging.ILogger<ForgotPassword> Logger
@inject NavigationManager Navigation

<PageTitle>パスワードリセット - ユビキタス言語管理システム</PageTitle>

<div class="container-fluid d-flex justify-content-center align-items-center min-vh-100">
    <div class="card shadow-lg" style="width: 100%; max-width: 450px;">
        <div class="card-header text-center bg-primary text-white">
            <h3 class="mb-0">
                <i class="fas fa-key me-2"></i>
                パスワードリセット
            </h3>
        </div>
        
        <div class="card-body p-4">
            @* 🎯 ADR_010準拠: Blazor Server初学者向けコメント *@
            @* 【Blazor Server解説】 *@
            @* - EditForm: サーバーサイドバリデーション対応のフォームコンポーネント *@
            @* - OnValidSubmit: バリデーション成功時のイベントハンドラー *@
            @* - DataAnnotationsValidator: モデルの属性ベースバリデーション *@
            @* - ValidationSummary: バリデーションエラーの一覧表示 *@
            
            @if (_isLoading)
            {
                @* 🔄 ローディング状態: メール送信処理中の表示 *@
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">送信中...</span>
                    </div>
                    <p class="mt-2">メール送信中...</p>
                </div>
            }
            else if (_emailSent)
            {
                @* ✅ 送信完了状態: 成功メッセージ表示 *@
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">
                        <i class="fas fa-check-circle me-2"></i>
                        メールを送信しました
                    </h4>
                    <p class="mb-0">
                        パスワードリセット用のメールを送信しました。
                        メール内のリンクをクリックして、新しいパスワードを設定してください。
                    </p>
                    <hr>
                    <p class="mb-0">
                        <small class="text-muted">
                            メールが届かない場合は、迷惑メールフォルダをご確認ください。
                            リンクの有効期限は24時間です。
                        </small>
                    </p>
                </div>
                
                <div class="d-grid gap-2">
                    <button class="btn btn-outline-primary" type="button" @onclick="BackToLogin">
                        <i class="fas fa-arrow-left me-2"></i>
                        ログイン画面に戻る
                    </button>
                </div>
            }
            else
            {
                @* 📝 入力フォーム: メールアドレス入力 *@
                <EditForm Model="_model" OnValidSubmit="HandleSubmitAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" role="alert" />
                    
                    @* ❌ エラーメッセージ表示（ADR_007準拠：ユーザーフレンドリーなメッセージ） *@
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @_errorMessage
                        </div>
                    }
                    
                    <div class="mb-4">
                        <label for="email" class="form-label">
                            <i class="fas fa-envelope me-2"></i>
                            メールアドレス
                        </label>
                        <InputText id="email" class="form-control form-control-lg" 
                                   @bind-Value="_model.Email" 
                                   placeholder="メールアドレスを入力してください"
                                   autocomplete="email" />
                        <ValidationMessage For="@(() => _model.Email)" class="text-danger" />
                        <div class="form-text">
                            登録時に使用したメールアドレスを入力してください。
                        </div>
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary btn-lg" disabled="@_isProcessing">
                            @* 🎯 Blazor Server: ボタン状態管理とユーザーフィードバック *@
                            @if (_isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                @:送信中...
                            }
                            else
                            {
                                <i class="fas fa-paper-plane me-2"></i>
                                @:リセットメール送信
                            }
                        </button>
                        
                        <button class="btn btn-outline-secondary" type="button" @onclick="BackToLogin">
                            <i class="fas fa-arrow-left me-2"></i>
                            ログイン画面に戻る
                        </button>
                    </div>
                </EditForm>
            }
        </div>
        
        <div class="card-footer text-center bg-light">
            <small class="text-muted">
                <i class="fas fa-shield-alt me-1"></i>
                セキュアなパスワードリセット
            </small>
        </div>
    </div>
</div>

@code {
    // 📋 フォームモデル: バリデーション対応
    private ForgotPasswordModel _model = new();
    private bool _isLoading = false;
    private bool _isProcessing = false;
    private bool _emailSent = false;
    private string? _errorMessage;
    
    /// <summary>
    /// パスワードリセット要求フォームモデル
    /// </summary>
    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "メールアドレスは必須です")]
        [EmailAddress(ErrorMessage = "有効なメールアドレスを入力してください")]
        [Display(Name = "メールアドレス")]
        public string Email { get; set; } = string.Empty;
    }
    
    /// <summary>
    /// フォーム送信処理
    /// </summary>
    /// <remarks>
    /// 🎯 ADR_007準拠: Result型によるエラーハンドリング
    /// 📊 ADR_008準拠: 構造化ログ出力
    /// 🔐 セキュリティ考慮: メール送信成功・失敗に関わらず同じレスポンス
    /// </remarks>
    private async Task HandleSubmitAsync()
    {
        // 📊 ADR_008準拠: ユーザー操作ログ（Information レベル）
        Logger.LogInformation("Password reset request initiated. Email: {Email}", 
            _model.Email);
        
        _isProcessing = true;
        _errorMessage = null;
        
        // ⚡ Blazor Server: UI更新通知 - 処理開始状態を即座に反映
        StateHasChanged();
        
        try
        {
            // 🔑 Application層呼び出し: パスワードリセット要求
            var emailValue = Email.create(_model.Email);
            
            if (emailValue.IsError)
            {
                // ❌ バリデーションエラー: ADR_007準拠のエラーハンドリング
                _errorMessage = "有効なメールアドレスを入力してください。";
                Logger.LogWarning("Invalid email format in password reset request. Email: {Email}", 
                    _model.Email);
                return;
            }
            
            var result = await AuthService.RequestPasswordResetAsync(emailValue.ResultValue);
            
            // 🔐 セキュリティ考慮: 成功・失敗に関わらず同じレスポンス
            // 存在しないメールアドレスでも同様の応答を返すことで、
            // アカウント存在確認攻撃を防止
            _emailSent = true;
            _isLoading = false;
            
            if (result.IsOk)
            {
                // ✅ 成功ログ: ADR_008準拠（Information レベル）
                Logger.LogInformation("Password reset email sent successfully. Email: {Email}", 
                    _model.Email);
            }
            else
            {
                // ⚠️ 失敗ログ: ADR_008準拠（Warning レベル - ビジネスルール違反）
                Logger.LogWarning("Password reset request failed. Email: {Email}, Error: {Error}", 
                    _model.Email, result.ErrorValue);
                
                // 🔐 セキュリティ: エラー詳細は非表示、一般的なメッセージを表示
                // ただし、UIでは成功として扱う
            }
        }
        catch (Exception ex)
        {
            // ❌ 予期しないエラー: ADR_008準拠（Error レベル）
            Logger.LogError(ex, "Unexpected error during password reset request. Email: {Email}", 
                _model.Email);
            
            // 🎯 ADR_007準拠: ユーザーフレンドリーなエラーメッセージ
            _errorMessage = "システムエラーが発生しました。しばらく待ってから再試行してください。";
        }
        finally
        {
            _isProcessing = false;
            
            // ⚡ Blazor Server: UI更新通知 - 処理完了状態を反映
            StateHasChanged();
        }
    }
    
    /// <summary>
    /// ログイン画面への戻り処理
    /// </summary>
    /// <remarks>
    /// 🌐 Blazor Server: NavigationManagerによるページ遷移
    /// </remarks>
    private void BackToLogin()
    {
        // 📊 ユーザーナビゲーション: Debug レベルログ
        Logger.LogDebug("User navigated back to login from forgot password page");
        
        Navigation.NavigateTo("/auth/login");
    }
}