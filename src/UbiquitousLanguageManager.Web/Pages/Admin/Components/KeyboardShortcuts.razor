@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@* キーボードショートカットコンポーネント *@
@* Blazor Server初学者向け: キーボードショートカットの登録と管理を行い、 *@
@* ユーザーの操作効率を向上させるコンポーネント *@

@code {
    [Parameter] public EventCallback<string> OnShortcutPressed { get; set; }
    [Parameter] public bool ShowHelp { get; set; } = false;
    [Parameter] public List<ShortcutDefinition> Shortcuts { get; set; } = new();
    
    private DotNetObjectReference<KeyboardShortcuts>? objRef;
    private bool isInitialized = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            
            // デフォルトショートカットを設定
            if (!Shortcuts.Any())
            {
                SetupDefaultShortcuts();
            }
            
            // JavaScriptでキーボードイベントリスナーを設定
            await JSRuntime.InvokeVoidAsync("keyboardShortcuts.initialize", objRef);
            isInitialized = true;
        }
    }
    
    /// <summary>
    /// JavaScriptから呼び出されるキーボードイベントハンドラー
    /// </summary>
    [JSInvokable]
    public async Task HandleKeyPress(string key, bool ctrlKey, bool altKey, bool shiftKey)
    {
        var shortcut = FindMatchingShortcut(key, ctrlKey, altKey, shiftKey);
        if (shortcut != null)
        {
            await OnShortcutPressed.InvokeAsync(shortcut.Action);
        }
    }
    
    /// <summary>
    /// ショートカットを追加
    /// </summary>
    public void AddShortcut(string key, string action, string description, bool ctrlKey = false, bool altKey = false, bool shiftKey = false)
    {
        var shortcut = new ShortcutDefinition
        {
            Key = key,
            Action = action,
            Description = description,
            CtrlKey = ctrlKey,
            AltKey = altKey,
            ShiftKey = shiftKey
        };
        
        // 重複チェック
        var existing = FindMatchingShortcut(key, ctrlKey, altKey, shiftKey);
        if (existing != null)
        {
            Shortcuts.Remove(existing);
        }
        
        Shortcuts.Add(shortcut);
    }
    
    /// <summary>
    /// ショートカットを削除
    /// </summary>
    public void RemoveShortcut(string action)
    {
        var shortcut = Shortcuts.FirstOrDefault(s => s.Action == action);
        if (shortcut != null)
        {
            Shortcuts.Remove(shortcut);
        }
    }
    
    /// <summary>
    /// ヘルプモーダルの表示切り替え
    /// </summary>
    public void ToggleHelp()
    {
        ShowHelp = !ShowHelp;
        StateHasChanged();
    }
    
    private ShortcutDefinition? FindMatchingShortcut(string key, bool ctrlKey, bool altKey, bool shiftKey)
    {
        return Shortcuts.FirstOrDefault(s => 
            s.Key.Equals(key, StringComparison.OrdinalIgnoreCase) &&
            s.CtrlKey == ctrlKey &&
            s.AltKey == altKey &&
            s.ShiftKey == shiftKey);
    }
    
    private void SetupDefaultShortcuts()
    {
        Shortcuts.AddRange(new[]
        {
            new ShortcutDefinition { Key = "n", Action = "new-user", Description = "新規ユーザー作成", CtrlKey = true },
            new ShortcutDefinition { Key = "f", Action = "search", Description = "検索にフォーカス", CtrlKey = true },
            new ShortcutDefinition { Key = "r", Action = "refresh", Description = "リフレッシュ", CtrlKey = true },
            new ShortcutDefinition { Key = "s", Action = "save", Description = "保存", CtrlKey = true },
            new ShortcutDefinition { Key = "Escape", Action = "cancel", Description = "キャンセル/閉じる", CtrlKey = false },
            new ShortcutDefinition { Key = "F1", Action = "help", Description = "ヘルプ表示", CtrlKey = false },
            new ShortcutDefinition { Key = "Delete", Action = "delete", Description = "削除", CtrlKey = false },
            new ShortcutDefinition { Key = "Enter", Action = "submit", Description = "送信/確定", CtrlKey = true }
        });
    }
    
    public async ValueTask DisposeAsync()
    {
        if (isInitialized && JSRuntime != null)
        {
            await JSRuntime.InvokeVoidAsync("keyboardShortcuts.dispose");
        }
        objRef?.Dispose();
    }
    
    private string GetShortcutCategory(string action) => action switch
    {
        "new-user" or "save" or "delete" or "submit" => "編集操作",
        "search" or "refresh" => "ナビゲーション",
        "help" or "cancel" => "ヘルプ・キャンセル",
        _ => "その他"
    };
    
    public class ShortcutDefinition
    {
        public string Key { get; set; } = string.Empty;
        public string Action { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public bool CtrlKey { get; set; }
        public bool AltKey { get; set; }
        public bool ShiftKey { get; set; }
        
        public string DisplayText
        {
            get
            {
                var parts = new List<string>();
                if (CtrlKey) parts.Add("Ctrl");
                if (AltKey) parts.Add("Alt");
                if (ShiftKey) parts.Add("Shift");
                parts.Add(Key);
                return string.Join(" + ", parts);
            }
        }
    }
}

@* ヘルプモーダル *@
@if (ShowHelp)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-keyboard me-2"></i>
                        キーボードショートカット
                    </h5>
                    <button type="button" class="btn-close" @onclick="ToggleHelp"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        @foreach (var group in Shortcuts.GroupBy(s => GetShortcutCategory(s.Action)))
                        {
                            <div class="col-md-6 mb-4">
                                <h6 class="text-primary border-bottom pb-2">@group.Key</h6>
                                @foreach (var shortcut in group.OrderBy(s => s.Description))
                                {
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span>@shortcut.Description</span>
                                        <kbd class="kbd-modern">@shortcut.DisplayText</kbd>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleHelp">
                        <i class="fas fa-times me-1"></i>
                        閉じる
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@* JavaScriptライブラリの埋め込み *@
<script>
window.keyboardShortcuts = {
    dotNetRef: null,
    
    initialize: function(dotNetRef) {
        this.dotNetRef = dotNetRef;
        document.addEventListener('keydown', this.handleKeyDown.bind(this));
    },
    
    handleKeyDown: function(event) {
        // フォーム要素内でのショートカットを一部無効化
        const activeElement = document.activeElement;
        const isFormElement = activeElement && 
            (activeElement.tagName === 'INPUT' || 
             activeElement.tagName === 'TEXTAREA' || 
             activeElement.tagName === 'SELECT' ||
             activeElement.contentEditable === 'true');
        
        // フォーム要素内でもEscapeやF1は有効にする
        const allowedInForm = ['Escape', 'F1'];
        
        if (isFormElement && !allowedInForm.includes(event.key) && !event.ctrlKey) {
            return;
        }
        
        // ショートカットがマッチした場合はデフォルト動作を防ぐ
        const shortcutFound = this.checkForShortcut(event);
        if (shortcutFound) {
            event.preventDefault();
            event.stopPropagation();
        }
    },
    
    checkForShortcut: function(event) {
        if (this.dotNetRef) {
            this.dotNetRef.invokeMethodAsync('HandleKeyPress', 
                event.key, 
                event.ctrlKey, 
                event.altKey, 
                event.shiftKey);
            return true;
        }
        return false;
    },
    
    dispose: function() {
        if (this.dotNetRef) {
            document.removeEventListener('keydown', this.handleKeyDown.bind(this));
            this.dotNetRef = null;
        }
    }
};
</script>

<style>
    /* モダンなKBDスタイル */
    .kbd-modern {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        color: #495057;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 0.75rem;
        font-weight: 600;
        padding: 0.25rem 0.5rem;
        white-space: nowrap;
    }
    
    .kbd-modern:hover {
        background-color: #e9ecef;
        transform: translateY(-1px);
        transition: all 0.15s ease-in-out;
    }
    
    /* ショートカットヘルプのスタイル */
    .shortcut-help .modal-body {
        max-height: 60vh;
        overflow-y: auto;
    }
    
    .shortcut-category {
        border-left: 3px solid var(--bs-primary);
        padding-left: 1rem;
        margin-bottom: 1.5rem;
    }
    
    /* レスポンシブ対応 */
    @@media (max-width: 768px) {
        .kbd-modern {
            font-size: 0.7rem;
            padding: 0.2rem 0.4rem;
        }
        
        .modal-lg {
            max-width: 95vw;
        }
    }
    
    /* アクセシビリティ */
    @@media (prefers-reduced-motion: reduce) {
        .kbd-modern:hover {
            transform: none;
            transition: none;
        }
    }
</style>

