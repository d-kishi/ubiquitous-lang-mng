@* ローディングオーバーレイコンポーネント *@
@* Blazor Server初学者向け: 非同期処理中の視覚的フィードバックを提供するコンポーネント *@

@if (IsVisible)
{
    <div class="loading-overlay @(FullScreen ? "loading-overlay-fullscreen" : "loading-overlay-container")">
        <div class="loading-content">
            @if (ShowSpinner)
            {
                <div class="spinner-container">
                    @switch (SpinnerType)
                    {
                        case SpinnerStyle.Border:
                            <div class="spinner-border @SpinnerSizeClass" role="status">
                                <span class="visually-hidden">@LoadingText</span>
                            </div>
                            break;
                        case SpinnerStyle.Grow:
                            <div class="spinner-grow @SpinnerSizeClass" role="status">
                                <span class="visually-hidden">@LoadingText</span>
                            </div>
                            break;
                        case SpinnerStyle.Custom:
                            <div class="custom-spinner">
                                <div class="spinner-ring"></div>
                                <div class="spinner-ring"></div>
                                <div class="spinner-ring"></div>
                            </div>
                            break;
                    }
                </div>
            }
            
            @if (!string.IsNullOrEmpty(LoadingText))
            {
                <div class="loading-text">
                    @LoadingText
                </div>
            }
            
            @if (ShowProgress && ProgressValue.HasValue)
            {
                <div class="progress-container">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" 
                             style="width: @(ProgressValue)%"
                             aria-valuenow="@ProgressValue" 
                             aria-valuemin="0" 
                             aria-valuemax="100">
                            @if (ShowProgressText)
                            {
                                <span>@ProgressValue%</span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool FullScreen { get; set; } = false;
    [Parameter] public string LoadingText { get; set; } = "読み込み中...";
    [Parameter] public bool ShowSpinner { get; set; } = true;
    [Parameter] public SpinnerStyle SpinnerType { get; set; } = SpinnerStyle.Border;
    [Parameter] public SpinnerSize Size { get; set; } = SpinnerSize.Medium;
    [Parameter] public bool ShowProgress { get; set; } = false;
    [Parameter] public double? ProgressValue { get; set; }
    [Parameter] public bool ShowProgressText { get; set; } = true;
    
    private string SpinnerSizeClass => Size switch
    {
        SpinnerSize.Small => "spinner-sm",
        SpinnerSize.Large => "spinner-lg",
        _ => ""
    };
    
    public enum SpinnerStyle
    {
        Border,
        Grow,
        Custom
    }
    
    public enum SpinnerSize
    {
        Small,
        Medium,
        Large
    }
}

<style>
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(2px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        animation: fadeIn 0.3s ease-in;
    }
    
    .loading-overlay-fullscreen {
        position: fixed;
        width: 100vw;
        height: 100vh;
        z-index: 9999;
    }
    
    .loading-overlay-container {
        border-radius: 0.375rem;
    }
    
    .loading-content {
        text-align: center;
        padding: 2rem;
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        max-width: 300px;
    }
    
    .spinner-container {
        margin-bottom: 1rem;
    }
    
    .loading-text {
        font-size: 0.875rem;
        color: #6b7280;
        margin-bottom: 1rem;
    }
    
    .progress-container {
        width: 100%;
    }
    
    /* カスタムスピナー */
    .custom-spinner {
        display: inline-block;
        position: relative;
        width: 40px;
        height: 40px;
    }
    
    .spinner-ring {
        box-sizing: border-box;
        display: block;
        position: absolute;
        width: 32px;
        height: 32px;
        margin: 4px;
        border: 3px solid var(--bs-primary);
        border-radius: 50%;
        animation: spinner-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
        border-color: var(--bs-primary) transparent transparent transparent;
    }
    
    .spinner-ring:nth-child(1) { animation-delay: -0.45s; }
    .spinner-ring:nth-child(2) { animation-delay: -0.3s; }
    .spinner-ring:nth-child(3) { animation-delay: -0.15s; }
    
    @@keyframes spinner-ring {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
    
    @@keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    
    /* レスポンシブ対応 */
    @@media (max-width: 576px) {
        .loading-content {
            padding: 1.5rem;
            max-width: 280px;
        }
    }
</style>