@page "/Account/ChangePassword"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using UbiquitousLanguageManager.Infrastructure.Data.Entities
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<ChangePassword> Logger
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>パスワード変更 - ユビキタス言語管理システム</PageTitle>

<div class="container-fluid mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-key me-2"></i>パスワード変更
                    </h3>
                    @if (isFirstLogin)
                    {
                        <small class="text-warning">
                            <i class="fas fa-exclamation-triangle me-1"></i>
                            初回ログインのため、パスワード変更が必要です
                        </small>
                    }
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>@errorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>@successMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <EditForm Model="model" OnValidSubmit="HandleChangePassword" FormName="ChangePasswordForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">
                                <i class="fas fa-lock me-1"></i>現在のパスワード
                            </label>
                            <div class="input-group">
                                <InputText id="currentPassword" 
                                          @bind-Value="model.CurrentPassword" 
                                          type="@(showCurrentPassword ? "text" : "password")"
                                          class="form-control" 
                                          placeholder="現在のパスワードを入力してください" />
                                <button type="button" 
                                        class="btn btn-outline-secondary" 
                                        @onclick="() => showCurrentPassword = !showCurrentPassword">
                                    <i class="fas @(showCurrentPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="() => model.CurrentPassword" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="newPassword" class="form-label">
                                <i class="fas fa-key me-1"></i>新しいパスワード
                            </label>
                            <div class="input-group">
                                <InputText id="newPassword" 
                                          @bind-Value="model.NewPassword" 
                                          type="@(showNewPassword ? "text" : "password")"
                                          class="form-control" 
                                          placeholder="新しいパスワードを入力してください" />
                                <button type="button" 
                                        class="btn btn-outline-secondary" 
                                        @onclick="() => showNewPassword = !showNewPassword">
                                    <i class="fas @(showNewPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="() => model.NewPassword" class="text-danger" />
                            <div class="form-text">
                                <small>
                                    <i class="fas fa-info-circle me-1"></i>
                                    8文字以上、英数字を含むパスワードを設定してください
                                </small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">
                                <i class="fas fa-key me-1"></i>新しいパスワード（確認）
                            </label>
                            <div class="input-group">
                                <InputText id="confirmPassword" 
                                          @bind-Value="model.ConfirmPassword" 
                                          type="@(showConfirmPassword ? "text" : "password")"
                                          class="form-control" 
                                          placeholder="確認のため再度入力してください" />
                                <button type="button" 
                                        class="btn btn-outline-secondary" 
                                        @onclick="() => showConfirmPassword = !showConfirmPassword">
                                    <i class="fas @(showConfirmPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="() => model.ConfirmPassword" class="text-danger" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" 
                                    class="btn btn-primary btn-lg" 
                                    disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <text>変更中...</text>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <text>パスワードを変更</text>
                                }
                            </button>

                            @if (!isFirstLogin)
                            {
                                <button type="button" 
                                        class="btn btn-outline-secondary" 
                                        @onclick="NavigateBack"
                                        disabled="@isProcessing">
                                    <i class="fas fa-arrow-left me-2"></i>戻る
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>

            @if (isFirstLogin)
            {
                <div class="alert alert-info mt-3">
                    <h6><i class="fas fa-info-circle me-2"></i>初回ログインについて</h6>
                    <p class="mb-0">
                        セキュリティ向上のため、初回ログイン時はパスワード変更が必須となっています。<br>
                        パスワード変更完了後、システムの全機能をご利用いただけます。
                    </p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// パスワード変更フォームモデル
    /// </summary>
    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "現在のパスワードを入力してください。")]
        [Display(Name = "現在のパスワード")]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "新しいパスワードを入力してください。")]
        [StringLength(100, ErrorMessage = "パスワードは{2}文字以上{1}文字以下で入力してください。", MinimumLength = 8)]
        [Display(Name = "新しいパスワード")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "パスワード確認を入力してください。")]
        [Compare("NewPassword", ErrorMessage = "新しいパスワードと確認パスワードが一致しません。")]
        [Display(Name = "パスワード確認")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private ChangePasswordModel model = new();
    private string? errorMessage;
    private string? successMessage;
    private bool isProcessing = false;
    private bool isFirstLogin = false;
    private ApplicationUser? currentUser;

    // パスワード表示切り替え用フラグ
    private bool showCurrentPassword = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    /// <summary>
    /// コンポーネント初期化処理
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 🔍 現在のユーザー情報取得
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userEmail = authState.User.Identity.Name;
                if (!string.IsNullOrEmpty(userEmail))
                {
                    currentUser = await UserManager.FindByEmailAsync(userEmail);
                    if (currentUser != null)
                    {
                        isFirstLogin = currentUser.IsFirstLogin;
                        Logger.LogInformation("パスワード変更画面表示: {UserId}, IsFirstLogin: {IsFirstLogin}", 
                            currentUser.Id, isFirstLogin);
                    }
                }
            }

            if (currentUser == null)
            {
                Logger.LogWarning("パスワード変更画面: ユーザー情報取得失敗");
                Navigation.NavigateTo("/login", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "パスワード変更画面初期化エラー: {Message}", ex.Message);
            errorMessage = "画面の初期化中にエラーが発生しました。再度ログインしてください。";
        }
    }

    /// <summary>
    /// パスワード変更処理（TECH-004対応）
    /// </summary>
    private async Task HandleChangePassword()
    {
        if (currentUser == null)
        {
            errorMessage = "ユーザー情報が取得できません。再度ログインしてください。";
            return;
        }

        isProcessing = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            // 🔐 ASP.NET Core Identity パスワード変更実行
            var result = await UserManager.ChangePasswordAsync(currentUser, model.CurrentPassword, model.NewPassword);

            if (result.Succeeded)
            {
                // ✅ パスワード変更成功 → IsFirstLoginフラグ更新（TECH-004仕様対応）
                if (currentUser.IsFirstLogin)
                {
                    currentUser.IsFirstLogin = false;
                    currentUser.UpdatedAt = DateTime.UtcNow;
                    currentUser.UpdatedBy = currentUser.Email ?? "System";
                    currentUser.InitialPassword = null; // セキュリティ強化: 初期パスワード情報削除

                    var updateResult = await UserManager.UpdateAsync(currentUser);
                    if (!updateResult.Succeeded)
                    {
                        Logger.LogError("パスワード変更後のフラグ更新失敗: {UserId}, Errors: {Errors}",
                            currentUser.Id, string.Join(", ", updateResult.Errors.Select(e => e.Description)));
                        errorMessage = "パスワード変更は成功しましたが、システム更新でエラーが発生しました。";
                        return;
                    }

                    Logger.LogInformation("初回ログインパスワード変更完了: {UserId}", currentUser.Id);
                }

                Logger.LogInformation("パスワード変更成功: {UserId}", currentUser.Id);
                successMessage = "パスワードを変更しました。";

                // 🎯 成功時はホーム画面へリダイレクト（3秒後）
                _ = Task.Delay(3000).ContinueWith(_ => 
                {
                    InvokeAsync(() => Navigation.NavigateTo("/", forceLoad: true));
                });
            }
            else
            {
                // ❌ パスワード変更失敗
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                Logger.LogWarning("パスワード変更失敗: {UserId}, Errors: {Errors}", currentUser.Id, errors);
                errorMessage = $"パスワード変更に失敗しました: {errors}";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "パスワード変更処理エラー: {UserId}, {Message}", currentUser.Id, ex.Message);
            errorMessage = "パスワード変更処理中にエラーが発生しました。管理者にお問い合わせください。";
        }
        finally
        {
            isProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// 戻るボタン処理
    /// </summary>
    private void NavigateBack()
    {
        if (!isFirstLogin)
        {
            Navigation.NavigateTo("/");
        }
    }
}