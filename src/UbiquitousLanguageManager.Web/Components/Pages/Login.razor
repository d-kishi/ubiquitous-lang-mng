@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using UbiquitousLanguageManager.Contracts.DTOs.Authentication
@using System.Text.Json.Serialization
@layout EmptyLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Login> Logger

<PageTitle>ログイン - ユビキタス言語管理システム</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light">
  <div class="row w-100">
    <div class="col-lg-4 col-md-6 col-sm-8 mx-auto">
      <div class="card shadow-lg border-0">
        <div class="card-body p-5">
          <!-- ログインヘッダー -->
          <div class="text-center mb-4">
            <h2 class="fw-bold text-primary">ログイン</h2>
            <p class="text-muted">ユビキタス言語管理システムへようこそ</p>
          </div>

          <!-- エラーメッセージ表示 -->
          @if (!string.IsNullOrEmpty(errorMessage))
          {
            <div class="alert alert-danger d-flex align-items-center" role="alert">
              <i class="fas fa-exclamation-triangle me-2"></i>
              <div>@errorMessage</div>
            </div>
          }

          <!-- 成功メッセージ表示 -->
          @if (!string.IsNullOrEmpty(successMessage))
          {
            <div class="alert alert-success d-flex align-items-center" role="alert">
              <i class="fas fa-check-circle me-2"></i>
              <div>@successMessage</div>
            </div>
          }

          <!-- ログインフォーム -->
          <EditForm Model="@loginRequest" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <!-- メールアドレス入力 -->
            <div class="mb-3">
              <label for="email" class="form-label">
                <i class="fas fa-envelope me-1"></i>
                メールアドレス
              </label>
              <InputText id="email" @bind-Value="loginRequest.Email" class="form-control form-control-lg"
                placeholder="example@company.com" disabled="@isSubmitting" />
              <ValidationMessage For="@(() => loginRequest.Email)" class="text-danger small" />
            </div>

            <!-- パスワード入力 -->
            <div class="mb-3">
              <label for="password" class="form-label">
                <i class="fas fa-lock me-1"></i>
                パスワード
              </label>
              <InputText id="password" @bind-Value="loginRequest.Password" type="password"
                class="form-control form-control-lg" placeholder="パスワードを入力してください" disabled="@isSubmitting" />
              <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger small" />
            </div>

            <!-- Remember Me チェックボックス -->
            <div class="mb-3 form-check">
              <InputCheckbox id="rememberMe" @bind-Value="loginRequest.RememberMe" class="form-check-input"
                disabled="@isSubmitting" />
              <label for="rememberMe" class="form-check-label">
                ログイン状態を保持する（7日間）
              </label>
            </div>

            <!-- ログインボタン -->
            <div class="d-grid">
              <button type="submit" class="btn btn-primary btn-lg" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                  <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  <text>ログイン中...</text>
                }
                else
                {
                  <i class="fas fa-sign-in-alt me-2"></i>
                  <text>ログイン</text>
                }
              </button>
            </div>
          </EditForm>

          <!-- パスワードリセットリンク -->
          <div class="text-center mt-4">
            <a href="/forgot-password" class="text-decoration-none text-muted">
              <i class="fas fa-key me-1"></i>
              パスワードをお忘れの方はこちら
            </a>
          </div>
        </div>
      </div>

      <!-- システム情報 -->
      <div class="text-center mt-3">
        <small class="text-muted">
          © 2024 ユビキタス言語管理システム - Blazor Server with Clean Architecture
        </small>
      </div>
    </div>
  </div>
</div>

@code {
  // 【Blazor Server初学者向け解説】
  // フィールド定義: コンポーネントの状態管理用変数
  // private: コンポーネント内部でのみ使用
  // @code ブロック: C#コードを記述する領域

  /// <summary>
  /// ログイン要求データモデル
  /// 【データバインディング】
  /// EditFormのModelプロパティとして設定し、InputTextコンポーネントと双方向バインディング
  /// </summary>
  private LoginRequestDto loginRequest = new();

  /// <summary>
  /// エラーメッセージ表示用
  /// </summary>
  private string errorMessage = string.Empty;

  /// <summary>
  /// 成功メッセージ表示用
  /// </summary>
  private string successMessage = string.Empty;

  /// <summary>
  /// 送信処理中フラグ
  /// 【UI/UXデザイン】
  /// 二重送信防止とローディング表示のための状態管理
  /// </summary>
  private bool isSubmitting = false;

  /// <summary>
  /// 初回ログイン状態フラグ
  /// 【TECH-006】初回ログイン判定用 - パスワード変更フロー制御に使用
  /// </summary>
#pragma warning disable CS0414 // フィールドは割り当てられていますが、値は使用されていません - 初回ログイン判定用に保持
  private bool isFirstLogin = false;
#pragma warning restore CS0414



  /// <summary>
  /// コンポーネント初期化処理
  /// 【Blazor Server ライフサイクル】
  /// OnInitializedAsync: コンポーネント初期化時に一度だけ実行される非同期メソッド
  /// 認証状態確認・初期設定・データ取得などに使用
  /// </summary>
  protected override async Task OnInitializedAsync()
  {
    try
    {
      // 現在の認証状態を確認
      // 【認証システム統合】
      // AuthenticationStateProvider: Blazor Server全体の認証状態を管理するサービス
      // すでにログイン済みの場合は、適切なページにリダイレクト
      var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

      if (authenticationState.User.Identity?.IsAuthenticated == true)
      {
        // 既にログイン済みの場合はホームページにリダイレクト
        Navigation.NavigateTo("/", replace: true);
        return;
      }

      // URLパラメータからエラーメッセージを取得（リダイレクト元からの情報）
      var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
      var queryString = uri.Query;

      if (!string.IsNullOrEmpty(queryString))
      {
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(queryString);

        if (queryParams.TryGetValue("error", out var errorParam))
        {
          errorMessage = Uri.UnescapeDataString(errorParam.ToString());
        }

        if (queryParams.TryGetValue("success", out var successParam))
        {
          successMessage = Uri.UnescapeDataString(successParam.ToString());
        }
      }
    }
    catch (Exception ex)
    {
      // 初期化エラーをログに記録
      Logger.LogError(ex, "ログイン画面初期化エラー Path: {Path}, Error: {ErrorMessage}",
        Navigation.Uri, ex.Message);
      errorMessage = "画面の初期化中にエラーが発生しました。";
    }
  }

  /// <summary>
  /// TECH-006: JavaScript API呼び出しによるログイン処理
  /// 【HTTPコンテキスト分離戦略】
  /// 従来のSignInManager直接呼び出しからJavaScript API経由に変更し、
  /// Headers read-onlyエラーを根本的に解決します。
  /// </summary>
  private async Task HandleValidSubmit()
  {
    // フォーム検証通過後の処理開始
    isSubmitting = true;
    errorMessage = string.Empty;
    successMessage = string.Empty;

    try
    {
      // 【TECH-006 核心実装】JavaScript API呼び出しによる認証
      // authApi.login(): auth-api.jsで定義されたJavaScript関数
      // 新しいHTTPコンテキストでAuthApiControllerを呼び出し、Headers read-only問題を回避
      // 【JSON変換最適化】JsonPropertyName属性により、camelCaseレスポンスを直接C#オブジェクトに変換
      var parsedResult = await JSRuntime.InvokeAsync<LoginApiResponse>("authApi.login",
      loginRequest.Email,
      loginRequest.Password,
      loginRequest.RememberMe);

      if (parsedResult?.Success == true)
      {
        // ログイン成功時の処理
        Logger.LogInformation("ユーザーログイン成功 Email: {Email}, RememberMe: {RememberMe}",
          MaskEmail(loginRequest.Email), loginRequest.RememberMe);
        successMessage = parsedResult.Message ?? "ログインしました。";

        // 【Phase A8 Step3対応】初回ログイン時のChangePassword.razorページ遷移
        // パスワード変更機能の統合により、モーダル表示から画面遷移に変更
        if (!string.IsNullOrEmpty(parsedResult.RedirectUrl) &&
        parsedResult.RedirectUrl.Contains("/change-password"))
        {
          // 初回ログインの場合：パスワード変更画面へ遷移
          isFirstLogin = true;
          successMessage = "初期パスワードでのログインが確認されました。パスワード変更画面へ移動します...";

          // UI更新後、少し待ってから画面遷移
          StateHasChanged();
          await Task.Delay(1000); // 成功メッセージ表示

          // ChangePassword.razorページへ遷移
          Navigation.NavigateTo("/change-password", forceLoad: true);

          // 初回ログイン専用のメッセージをログに記録
          Logger.LogInformation("初回ログイン検知 Email: {Email} RedirectTo: {RedirectUrl}",
            MaskEmail(loginRequest.Email), "/change-password");
          return; // 以降の処理をスキップ
        }
        else
        {
          // 通常ログインの場合：ホーム画面へリダイレクト
          // StateHasChanged()でUI更新後、少し待ってからリダイレクト
          StateHasChanged();
          await Task.Delay(1500); // 成功メッセージを表示してからリダイレクト

          Navigation.NavigateTo(parsedResult.RedirectUrl ?? "/", forceLoad: true);
        }
      }
      else
      {
        // 【csharp-infrastructure対応】ログイン失敗時の詳細エラー表示
        // 初期パスワード認証エラーの明確化
        Logger.LogWarning("ユーザーログイン失敗 Email: {Email}, Error: {ErrorMessage}",
          MaskEmail(loginRequest.Email), parsedResult?.Message ?? "Unknown error");
        string baseMessage = parsedResult?.Message ?? "ログインに失敗しました。";

        // 初期パスワード関連のエラーメッセージ強化
        if (baseMessage.Contains("初期パスワード") || baseMessage.Contains("パスワードが正しくありません"))
        {
          errorMessage = $"{baseMessage} 初期パスワード 'su' または設定済みパスワードを入力してください。";
        }
        else
        {
          errorMessage = $"{baseMessage} メールアドレスとパスワードを確認してください。";
        }
      }
    }
    catch (JSException jsEx)
    {
      // 【JavaScript API エラーハンドリング強化】
      Logger.LogError(jsEx, "JavaScript認証API呼び出しエラー Email: {Email}, Message: {Message}",
        MaskEmail(loginRequest.Email), jsEx.Message);

      // ネットワークエラー・サーバーエラーの詳細分析
      if (jsEx.Message.Contains("fetch") || jsEx.Message.Contains("network"))
      {
        errorMessage = "ネットワーク接続エラーです。インターネット接続を確認してやり直してください。";
      }
      else if (jsEx.Message.Contains("500") || jsEx.Message.Contains("Internal Server Error"))
      {
        errorMessage = "サーバーエラーが発生しました。管理者にお問い合わせください。";
      }
      else
      {
        errorMessage = "認証処理中にエラーが発生しました。ページを再読み込みしてやり直してください。";
      }
    }
    catch (Exception ex)
    {
      // 予期しないエラーの処理
      Logger.LogError(ex, "ログイン処理で予期しないエラー Email: {Email}, Error: {ErrorMessage}",
        MaskEmail(loginRequest.Email), ex.Message);
      errorMessage = "システムエラーが発生しました。管理者にお問い合わせください。";
    }
    finally
    {
      // 送信状態を解除
      isSubmitting = false;

      // 【Blazor Server重要概念】StateHasChanged()
      // サーバーサイドの状態変更をクライアント（ブラウザ）に通知
      // これにより、UI要素（ボタンの有効/無効、エラーメッセージなど）が再描画される
      StateHasChanged();
    }
  }

  /// <summary>
  /// [Phase A8 Step3対応] パスワード変更処理（削除済み）
  /// パスワード変更機能はChangePassword.razorページに統合されました。
  /// このメソッドは将来のメンテナンスで完全に削除される予定です。
  /// </summary>
  [Obsolete("パスワード変更機能はChangePassword.razorページに統合されました。代わりにChangePassword.razorを使用してください。")]
  private async Task HandlePasswordChange()
  {
    // Phase A8 Step3: この機能はChangePassword.razorページに統合されました
    Logger.LogWarning("廃止予定メソッド呼び出し Method: {Method} RedirectTo: {RedirectUrl}",
      nameof(HandlePasswordChange), "/change-password");
    
    // 安全のため、ChangePassword.razorページにリダイレクト
    Navigation.NavigateTo("/change-password", forceLoad: true);
    await Task.CompletedTask;
  }

  /// <summary>
  /// メールアドレスマスキング（ログ出力時の個人情報保護）
  /// 【セキュリティ配慮】個人情報保護のため、メールアドレスをマスキングしてログ出力
  /// 例: admin@example.com → ad***@example.com
  /// </summary>
  /// <param name="email">マスキング対象のメールアドレス</param>
  /// <returns>マスキング済みメールアドレス</returns>
  private string MaskEmail(string? email)
  {
    if (string.IsNullOrEmpty(email) || !email.Contains("@"))
    {
      return "***@unknown";
    }

    var parts = email.Split('@');
    if (parts[0].Length <= 2)
    {
      return $"***@{parts[1]}";
    }

    return $"{parts[0][..2]}***@{parts[1]}";
  }

  /// <summary>
  /// JavaScript APIレスポンス用データクラス
  /// 【JSON デシリアライゼーション最適化】
  /// JsonPropertyName属性: JavaScript側のcamelCaseプロパティをC#のPascalCaseプロパティに自動マッピング
  /// これにより、二重変換処理が不要になり、型安全性とパフォーマンスが向上
  /// </summary>
  private class LoginApiResponse
  {
    /// <summary>
    /// ログイン成功/失敗フラグ
    /// JavaScript: success → C#: Success
    /// </summary>
    [JsonPropertyName("success")]
    public bool Success { get; set; }

    /// <summary>
    /// エラーメッセージまたは成功メッセージ
    /// JavaScript: message → C#: Message
    /// </summary>
    [JsonPropertyName("message")]
    public string? Message { get; set; }

    /// <summary>
    /// リダイレクト先URL（初回ログイン時は/change-password）
    /// JavaScript: redirectUrl → C#: RedirectUrl
    /// </summary>
    [JsonPropertyName("redirectUrl")]
    public string? RedirectUrl { get; set; }

    /// <summary>
    /// HTTPステータスコード
    /// JavaScript: status → C#: Status
    /// </summary>
    [JsonPropertyName("status")]
    public int Status { get; set; }
  }
}

@*
【Phase A8 Step3対応 - パスワード変更機能統合完了】

削除完了: パスワード変更モーダルダイアログ（約80行）
統合先: /change-password ページ（ChangePassword.razor）

初回ログイン時の動作：
1. Login.razor: 初回ログイン検知
2. 成功メッセージ表示後、ChangePassword.razorページに自動遷移
3. ChangePassword.razor: 専用UI・UXでパスワード変更実行

効果：
- コード削減：約80行の重複実装削除
- 責務分離：ログイン機能とパスワード変更機能の完全分離
- UI/UX統一：すべてのパスワード変更がChangePassword.razorで実行
- 保守性向上：パスワード変更ロジックの一元化
*@

@*
【Phase A8 Step3 実装完了 - パスワード変更機能統合】

== TECH-006解決実装 ==
1. 【HTTPコンテキスト分離戦略】SignInManager直接呼び出し → JavaScript API経由
2. 【JavaScript統合パターン】IJSRuntime.InvokeAsync() + authApi.login()
3. 【Headers read-onlyエラー根本解決】新しいHTTPコンテキストで認証処理実行

== Step3パスワード変更機能統合 ==
1. 【重複実装削除】Login.razor内モーダルダイアログ（約80行）完全削除
2. 【画面遷移統合】初回ログイン時 → ChangePassword.razorページ自動遷移
3. 【責務分離実現】ログイン機能とパスワード変更機能の完全分離
4. 【保守性向上】パスワード変更ロジック一元化・テスト効率化

== 統合後の認証フロー ==
【初回ログイン】Login.razor → ChangePassword.razor → Home
【通常ログイン】Login.razor → Home
【パスワード変更】Profile.razor → ChangePassword.razor または直接 /change-password

== 技術的効果 ==
- ✅ コード削減：約80-100行（showPasswordChange関連全体）
- ✅ UI/UX統一：すべてのパスワード変更が統一画面で実行
- ✅ セキュリティ強化：パスワード変更ロジック一元管理
- ✅ Blazor Server最適化：単一責任原則遵守・コンポーネント最適化

本実装により、Phase A8 Step3の完全達成を実現しています。
*@