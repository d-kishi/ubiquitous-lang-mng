@page "/change-password"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using UbiquitousLanguageManager.Contracts.DTOs.Authentication
@layout EmptyLayout
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>パスワード変更 - ユビキタス言語管理システム</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="row w-100">
        <div class="col-lg-4 col-md-6 col-sm-8 mx-auto">
            <div class="card shadow-lg border-0">
                <div class="card-body p-5">
                    <!-- パスワード変更ヘッダー -->
                    <div class="text-center mb-4">
                        <div class="text-warning mb-3">
                            <i class="fas fa-shield-alt fa-3x"></i>
                        </div>
                        <h2 class="fw-bold text-warning">パスワード変更</h2>
                        <div class="alert alert-warning mt-3">
                            <i class="fas fa-shield-alt me-2"></i>
                            <strong>初期パスワード変更が必要です</strong><br>
                            セキュリティ強化のため、初期パスワード 'su' から安全なパスワードに変更してください。<br>
                            <small class="text-muted">現在のパスワードには初期パスワード 'su' を入力してください。</small>
                        </div>
                    </div>

                    <!-- エラーメッセージ表示 -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger d-flex align-items-center" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <div>@errorMessage</div>
                        </div>
                    }

                    <!-- 成功メッセージ表示 -->
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success d-flex align-items-center" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            <div>@successMessage</div>
                        </div>
                    }

                    <!-- パスワード変更フォーム -->
                    <EditForm Model="@changePasswordRequest" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        
                        <!-- 現在のパスワード入力 -->
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">
                                <i class="fas fa-key me-1"></i>
                                現在のパスワード <small class="text-muted">(初期パスワード: su)</small>
                            </label>
                            <InputText id="currentPassword" 
                                      @bind-Value="changePasswordRequest.CurrentPassword" 
                                      type="password" 
                                      class="form-control form-control-lg"
                                      placeholder="初期パスワード 'su' を入力してください"
                                      disabled="@isSubmitting" />
                            <ValidationMessage For="@(() => changePasswordRequest.CurrentPassword)" class="text-danger small" />
                        </div>

                        <!-- 新しいパスワード入力 -->
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">
                                <i class="fas fa-lock me-1"></i>
                                新しいパスワード
                            </label>
                            <InputText id="newPassword" 
                                      @bind-Value="changePasswordRequest.NewPassword" 
                                      type="password" 
                                      class="form-control form-control-lg"
                                      placeholder="新しいパスワードを入力してください"
                                      disabled="@isSubmitting" />
                            <ValidationMessage For="@(() => changePasswordRequest.NewPassword)" class="text-danger small" />
                            <div class="form-text mt-2">
                                <small class="text-muted">
                                    <i class="fas fa-shield-alt me-1"></i>
                                    8文字以上、大文字・小文字・数字をそれぞれ1文字以上含めてください
                                </small>
                            </div>
                        </div>

                        <!-- パスワード確認入力 -->
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">
                                <i class="fas fa-check-double me-1"></i>
                                パスワード確認
                            </label>
                            <InputText id="confirmPassword" 
                                      @bind-Value="changePasswordRequest.ConfirmPassword" 
                                      type="password" 
                                      class="form-control form-control-lg"
                                      placeholder="新しいパスワードを再度入力してください"
                                      disabled="@isSubmitting" />
                            <ValidationMessage For="@(() => changePasswordRequest.ConfirmPassword)" class="text-danger small" />
                        </div>

                        <!-- 変更ボタン -->
                        <div class="d-grid mb-3">
                            <button type="submit" 
                                   class="btn btn-warning btn-lg" 
                                   disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <text>パスワード変更中...</text>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <text>パスワードを変更</text>
                                }
                            </button>
                        </div>

                        <!-- キャンセルボタン（ログアウト） -->
                        <div class="d-grid">
                            <button type="button" 
                                   class="btn btn-outline-secondary" 
                                   @onclick="HandleLogout"
                                   disabled="@isSubmitting">
                                <i class="fas fa-sign-out-alt me-2"></i>
                                キャンセル（ログアウト）
                            </button>
                        </div>
                    </EditForm>

                    <!-- パスワード強度ガイド -->
                    <div class="mt-4">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h6 class="card-title">
                                    <i class="fas fa-lightbulb me-2"></i>
                                    安全なパスワードのガイド
                                </h6>
                                <ul class="list-unstyled mb-0 small">
                                    <li><i class="fas fa-check text-success me-2"></i>8文字以上の長さ</li>
                                    <li><i class="fas fa-check text-success me-2"></i>大文字・小文字を混在</li>
                                    <li><i class="fas fa-check text-success me-2"></i>数字を含む</li>
                                    <li><i class="fas fa-check text-success me-2"></i>推測されにくい組み合わせ</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- システム情報 -->
            <div class="text-center mt-3">
                <small class="text-muted">
                    © 2024 ユビキタス言語管理システム - セキュリティ強化認証
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    // 【Blazor Server初学者向け解説】
    // パスワード変更コンポーネントの状態管理
    // TECH-006: JavaScript API呼び出しによる認証統合

    /// <summary>
    /// パスワード変更要求データモデル
    /// </summary>
    private ChangePasswordRequestDto changePasswordRequest = new();

    /// <summary>
    /// エラーメッセージ表示用
    /// </summary>
    private string errorMessage = string.Empty;

    /// <summary>
    /// 成功メッセージ表示用
    /// </summary>
    private string successMessage = string.Empty;

    /// <summary>
    /// 送信処理中フラグ
    /// </summary>
    private bool isSubmitting = false;

    /// <summary>
    /// コンポーネント初期化処理
    /// 【Blazor Server ライフサイクル】
    /// 認証状態確認・初回ログインチェック
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 現在の認証状態を確認
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            if (authenticationState.User.Identity?.IsAuthenticated != true)
            {
                // 未認証の場合はログイン画面にリダイレクト
                Navigation.NavigateTo("/login", replace: true);
                return;
            }

            // TODO: 初回ログイン状態の確認
            // 実際の実装では、AuthenticationStateProviderまたは専用サービスから
            // 初回ログイン状態を取得し、必要でない場合はホーム画面にリダイレクト
            
            // URLパラメータから情報を取得
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var queryString = uri.Query;
            
            if (!string.IsNullOrEmpty(queryString))
            {
                var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(queryString);
                
                if (queryParams.TryGetValue("error", out var errorParam))
                {
                    errorMessage = Uri.UnescapeDataString(errorParam.ToString());
                }

                if (queryParams.TryGetValue("success", out var successParam))
                {
                    successMessage = Uri.UnescapeDataString(successParam.ToString());
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ChangePassword component initialization error: {ex.Message}");
            errorMessage = "画面の初期化中にエラーが発生しました。";
        }
    }

    /// <summary>
    /// TECH-006: JavaScript API呼び出しによるパスワード変更処理
    /// </summary>
    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            // 【TECH-006 核心実装】JavaScript API呼び出しによるパスワード変更
            var changeResult = await JSRuntime.InvokeAsync<object>("authApi.changePassword", 
                changePasswordRequest.CurrentPassword,
                changePasswordRequest.NewPassword,
                changePasswordRequest.ConfirmPassword);

            // JavaScript側からのレスポンスを解析
            var resultJson = System.Text.Json.JsonSerializer.Serialize(changeResult);
            var parsedResult = System.Text.Json.JsonSerializer.Deserialize<PasswordChangeApiResponse>(resultJson);

            if (parsedResult?.Success == true)
            {
                // 【初期パスワード変更成功】csharp-infrastructure対応
                successMessage = parsedResult.Message ?? "初期パスワードから新しいパスワードに変更しました。";
                
                // InitialPasswordクリア処理の確認表示
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                Console.WriteLine($"初期パスワード変更成功 - ユーザー: {authState.User.Identity?.Name}");
                Console.WriteLine($"InitialPasswordフラグがクリアされ、正常なユーザー状態に移行しました。");
                
                // 成功メッセージを少し長めに表示してからホーム画面に移動
                StateHasChanged();
                await Task.Delay(3000); // 初期パスワード変更完了の満足感をしっかり伝える
                
                Navigation.NavigateTo(parsedResult.RedirectUrl ?? "/", forceLoad: true);
            }
            else
            {
                // 【初期パスワード変更失敗】詳細エラーメッセージ
                string baseMessage = parsedResult?.Message ?? "パスワード変更に失敗しました。";
                
                // 初期パスワード関連エラーの明確化
                if (baseMessage.Contains("現在のパスワード") || baseMessage.Contains("初期パスワード"))
                {
                    errorMessage = $"{baseMessage} 現在のパスワード欄には初期パスワード 'su' を入力してください。";
                }
                else if (baseMessage.Contains("パスワードの強度") || baseMessage.Contains("文字数"))
                {
                    errorMessage = $"{baseMessage} 新しいパスワードは8文字以上で、大文字・小文字・数字を含む必要があります。";
                }
                else
                {
                    errorMessage = $"{baseMessage} 入力内容を確認してやり直してください。";
                }
            }
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript API call failed: {jsEx.Message}");
            errorMessage = "パスワード変更処理中にエラーが発生しました。ページを再読み込みしてやり直してください。";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Password change process failed: {ex.Message}");
            errorMessage = "システムエラーが発生しました。管理者にお問い合わせください。";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// ログアウト処理（キャンセル時）
    /// </summary>
    private async Task HandleLogout()
    {
        try
        {
            // JavaScript API呼び出しによるログアウト
            var logoutResult = await JSRuntime.InvokeAsync<object>("authApi.logout");
            
            // ログアウト後、ログイン画面にリダイレクト
            Navigation.NavigateTo("/login?success=" + Uri.EscapeDataString("ログアウトしました。"), forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout failed: {ex.Message}");
            // エラーが発生してもログイン画面にリダイレクト
            Navigation.NavigateTo("/login", forceLoad: true);
        }
    }

    /// <summary>
    /// JavaScript APIレスポンス用データクラス
    /// </summary>
    private class PasswordChangeApiResponse
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public string? RedirectUrl { get; set; }
        public int Status { get; set; }
    }
}

<style>
    /* パスワード変更専用スタイル */
    .btn-warning {
        background: linear-gradient(45deg, #ffc107, #fd7e14);
        border: none;
        border-radius: 10px;
        transition: all 0.3s ease;
    }
    
    .btn-warning:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(255, 193, 7, 0.4);
    }
    
    .alert-info {
        border-left: 4px solid #0dcaf0;
        background: rgba(13, 202, 240, 0.1);
        border-color: rgba(13, 202, 240, 0.3);
    }
    
    .card .bg-light {
        background: rgba(248, 249, 250, 0.8) !important;
    }
    
    .form-control:focus {
        border-color: #ffc107;
        box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.25);
    }
</style>

@*
【ChangePassword.razor - TECH-006対応パスワード変更画面】

主要機能：
1. 【TECH-006統合】JavaScript API呼び出しによるパスワード変更
2. 【初回ログイン対応】セキュリティ強化による強制パスワード変更
3. 【バリデーション】DataAnnotationsによるフォーム検証
4. 【UX最適化】パスワード強度ガイド・リアルタイムフィードバック
5. 【セキュリティ】キャンセル時のログアウト処理

TECH-006解決効果：
- 新しいHTTPコンテキストでのパスワード変更API呼び出し
- Headers read-onlyエラーの回避
- セキュリティスタンプ更新の安全な実行
- Cookie再生成の適切な処理
*@