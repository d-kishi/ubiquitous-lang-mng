@using Microsoft.AspNetCore.Components.Authorization
@using UbiquitousLanguageManager.Web.Services
@inject BlazorAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<AuthorizeView>
    <Authorized>
        <div class="auth-display">
            <span class="user-info">
                <i class="bi bi-person-circle me-1"></i>
                @if (_currentUser != null)
                {
                    <span class="user-name">@_currentUser.Name</span>
                    <span class="user-role">(@_currentUser.Role)</span>
                }
            </span>
            <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="HandleLogoutAsync">
                <i class="bi bi-box-arrow-right me-1"></i>
                ログアウト
            </button>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private UbiquitousLanguageManager.Contracts.DTOs.Authentication.AuthenticatedUserDto? _currentUser;

    /// <summary>
    /// コンポーネント初期化
    /// 
    /// 【Blazor Server初学者向け解説】
    /// OnInitializedは、コンポーネントが初回レンダリングされる前に
    /// 一度だけ実行される初期化メソッドです。
    /// 
    /// 【Phase A9 統一認証効果】
    /// BlazorAuthenticationServiceの薄いラッパー層を通じて
    /// Infrastructure層の統一認証サービスにアクセス
    /// </summary>
    protected override void OnInitialized()
    {
        // Note: BlazorAuthenticationServiceには現在GetCurrentUserAsyncがないため
        // 認証状態から基本情報を取得する簡易実装
        // TODO: 必要に応じてBlazorAuthenticationServiceにGetCurrentUserAsync追加
        _currentUser = null; // 暫定実装: ユーザー情報表示は一時的に無効化
    }

    /// <summary>
    /// ログアウト処理（API経由・SignalR制約回避）
    ///
    /// 【Blazor Server制約対応】
    /// Blazor ComponentではSignalR制約によりCookie削除不可のため、
    /// JavaScript interop経由でAPI（/api/auth/logout）を呼び出します。
    /// この方式により HTTPコンテキストでの認証Cookie削除が可能になります。
    /// </summary>
    private async Task HandleLogoutAsync()
    {
        try
        {
            // API経由でログアウト（SignalR制約回避・動作確認済み）
            // authApi.logout()は既存のauth-api.jsを使用し、戻り値を取得
            var result = await JS.InvokeAsync<object>("authApi.logout");

            // ログアウト成功後はログイン画面へ遷移
            Console.WriteLine("ログアウト処理完了 - ログイン画面へリダイレクト中...");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            // JavaScript実行失敗時もログイン画面へリダイレクト（セキュリティ優先）
            Console.WriteLine($"ログアウト処理中にエラーが発生しました: {ex.Message}");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
    }
}

<style>
    .auth-display {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.875rem;
    }

    .user-name {
        font-weight: 500;
        color: #495057;
    }

    .user-role {
        font-size: 0.75rem;
        color: #6c757d;
        font-style: italic;
    }

    .bi {
        font-size: 0.875rem;
    }

    @@media (max-width: 640.98px) {
        .user-role {
            display: none;
        }
        
        .user-info {
            font-size: 0.75rem;
        }
    }
</style>