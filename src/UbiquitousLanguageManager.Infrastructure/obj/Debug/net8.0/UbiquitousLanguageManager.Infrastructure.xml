<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UbiquitousLanguageManager.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity">
            <summary>
            ユーザーテーブルのEntity Framework エンティティ
            PostgreSQL データベースのUsersテーブルにマッピング
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.Id">
            <summary>
            ユーザーID（主キー）
            PostgreSQL の BIGINT 型（BIGSERIAL）
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.Email">
            <summary>
            メールアドレス（ログインID）
            ユニーク制約あり
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.PasswordHash">
            <summary>
            パスワードハッシュ
            BCrypt でハッシュ化されたパスワード
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.Name">
            <summary>
            ユーザー名（表示名）
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.UserRole">
            <summary>
            ユーザーロール
            SuperUser, ProjectManager, DomainApprover, GeneralUser
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.IsActive">
            <summary>
            アクティブ状態フラグ
            論理削除に使用
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.IsFirstLogin">
            <summary>
            初回ログインフラグ
            パスワード変更が必要な状態を示す
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.UpdatedAt">
            <summary>
            最終更新日時（UTC）
            PostgreSQL の TIMESTAMPTZ 型
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.Entities.UserEntity.UpdatedBy">
            <summary>
            最終更新者ID
            外部キー制約なし（循環参照回避）
            </summary>
        </member>
        <member name="T:UbiquitousLanguageManager.Infrastructure.Data.UbiquitousLanguageDbContext">
            <summary>
            ユビキタス言語管理システムのデータベースコンテキスト
            Entity Framework Core + PostgreSQL の設定
            ASP.NET Core Identity との統合
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Data.UbiquitousLanguageDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{UbiquitousLanguageManager.Infrastructure.Data.UbiquitousLanguageDbContext})">
            <summary>
            コンストラクタ: Entity Framework の設定を受け取る
            </summary>
            <param name="options">DbContext オプション</param>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Data.UbiquitousLanguageDbContext.Users">
            <summary>
            ユーザーテーブル
            システム独自のユーザー管理（ASP.NET Core Identity とは別管理）
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Data.UbiquitousLanguageDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            モデル設定: Entity Framework の詳細設定
            テーブル構造、制約、インデックスの定義
            </summary>
            <param name="modelBuilder">モデルビルダー</param>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Data.UbiquitousLanguageDbContext.ConfigureUserEntity(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            ユーザーエンティティの詳細設定
            PostgreSQL 固有の最適化と制約設定
            </summary>
            <param name="modelBuilder">モデルビルダー</param>
        </member>
        <member name="T:UbiquitousLanguageManager.Infrastructure.Repositories.UserRepository">
            <summary>
            ユーザーリポジトリの実装（簡易版）
            雛型として最小限の機能を実装
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Repositories.UserRepository.#ctor(UbiquitousLanguageManager.Infrastructure.Data.UbiquitousLanguageDbContext,Microsoft.Extensions.Logging.ILogger{UbiquitousLanguageManager.Infrastructure.Repositories.UserRepository})">
            <summary>
            UserRepositoryのコンストラクタ
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Repositories.UserRepository.GetByEmailAsync(UbiquitousLanguageManager.Domain.Email)">
            <summary>
            一時的な簡易実装（雛型用）
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Repositories.UserRepository.GetByIdAsync(UbiquitousLanguageManager.Domain.UserId)">
            <summary>
            一時的な簡易実装（雛型用）
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Repositories.UserRepository.SaveAsync(UbiquitousLanguageManager.Domain.User)">
            <summary>
            一時的な簡易実装（雛型用）
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Repositories.UserRepository.GetByProjectIdAsync(UbiquitousLanguageManager.Domain.ProjectId)">
            <summary>
            一時的な簡易実装（雛型用）
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Repositories.UserRepository.DeleteAsync(UbiquitousLanguageManager.Domain.UserId)">
            <summary>
            一時的な簡易実装（雛型用）
            </summary>
        </member>
        <member name="T:UbiquitousLanguageManager.Infrastructure.Services.InitialDataService">
            <summary>
            初期データ投入サービス
            appsettings.jsonから初期スーパーユーザー設定を読み込み、
            機能仕様書で定義された"su"パスワードによる初期ユーザーを作成
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Services.InitialDataService.#ctor(UbiquitousLanguageManager.Infrastructure.Data.UbiquitousLanguageDbContext,Microsoft.Extensions.Logging.ILogger{UbiquitousLanguageManager.Infrastructure.Services.InitialDataService},Microsoft.Extensions.Options.IOptions{UbiquitousLanguageManager.Infrastructure.Services.InitialSuperUserSettings})">
            <summary>
            コンストラクタ: 依存関係の注入
            </summary>
            <param name="context">データベースコンテキスト</param>
            <param name="logger">ログ出力</param>
            <param name="settings">初期スーパーユーザー設定（appsettings.jsonから読み込み）</param>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Services.InitialDataService.SeedInitialDataAsync">
            <summary>
            初期データの投入処理
            システム初期化時に自動実行される
            </summary>
        </member>
        <member name="M:UbiquitousLanguageManager.Infrastructure.Services.InitialDataService.CreateInitialSuperUserAsync">
            <summary>
            初期スーパーユーザーの作成処理
            機能仕様書の仕様に従い、設定ファイルから情報を読み込んで作成
            </summary>
        </member>
        <member name="T:UbiquitousLanguageManager.Infrastructure.Services.InitialSuperUserSettings">
            <summary>
            初期スーパーユーザー設定クラス
            appsettings.jsonの"InitialSuperUser"セクションにバインド
            機能仕様書の仕様: 初期パスワード"su"、設定ファイル読み込み方式
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Services.InitialSuperUserSettings.Email">
            <summary>
            初期スーパーユーザーのメールアドレス
            設定ファイルから読み込み
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Services.InitialSuperUserSettings.Name">
            <summary>
            初期スーパーユーザーの名前
            設定ファイルから読み込み
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Services.InitialSuperUserSettings.Password">
            <summary>
            初期パスワード
            機能仕様書の仕様: 固定値"su"
            </summary>
        </member>
        <member name="P:UbiquitousLanguageManager.Infrastructure.Services.InitialSuperUserSettings.IsFirstLogin">
            <summary>
            初回ログインフラグ
            機能仕様書の仕様: 初回ログイン時のパスワード変更必須
            </summary>
        </member>
    </members>
</doc>
