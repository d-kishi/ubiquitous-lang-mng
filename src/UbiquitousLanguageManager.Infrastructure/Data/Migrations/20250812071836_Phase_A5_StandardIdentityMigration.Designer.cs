// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UbiquitousLanguageManager.Infrastructure.Data;

#nullable disable

namespace UbiquitousLanguageManager.Infrastructure.Data.Migrations
{
    [DbContext(typeof(UbiquitousLanguageDbContext))]
    [Migration("20250812071836_Phase_A5_StandardIdentityMigration")]
    partial class Phase_A5_StandardIdentityMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", null, t =>
                        {
                            t.HasComment("ASP.NET Core Identity ロール管理");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", null, t =>
                        {
                            t.HasComment("ASP.NET Core Identity ロールクレーム管理");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", null, t =>
                        {
                            t.HasComment("ASP.NET Core Identity ユーザークレーム管理");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", null, t =>
                        {
                            t.HasComment("ASP.NET Core Identity ユーザー・ロール関連");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasComment("ユーザーID（主キー、GUID形式）");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasComment("アクセス失敗回数");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasComment("同時実行制御スタンプ");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("メールアドレス");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasComment("メール確認済みフラグ");

                    b.Property<string>("InitialPassword")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("初期パスワード（初回ログイン時まで保持）");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("論理削除フラグ（false:有効、true:削除済み）");

                    b.Property<bool>("IsFirstLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("初回ログインフラグ（カスタムフィールド）");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasComment("ロックアウト有効フラグ");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("ロックアウト終了時間");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("ユーザー氏名（カスタムフィールド）");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("正規化メールアドレス（検索用）");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("正規化ユーザー名（検索用）");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasComment("パスワードハッシュ値（Identity管理）");

                    b.Property<DateTime?>("PasswordResetExpiry")
                        .HasColumnType("timestamptz")
                        .HasComment("リセットトークン有効期限（Phase A3機能）");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text")
                        .HasComment("パスワードリセットトークン（Phase A3機能）");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasComment("電話番号");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasComment("電話番号確認済みフラグ");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasComment("セキュリティスタンプ（パスワード変更時更新）");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasComment("二要素認証有効フラグ");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ID");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("ユーザー名（ログイン用）");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_ApplicationUsers_IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PasswordResetExpiry")
                        .HasDatabaseName("IX_ApplicationUsers_PasswordResetExpiry");

                    b.HasIndex("PasswordResetToken")
                        .HasDatabaseName("IX_ApplicationUsers_PasswordResetToken");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_ApplicationUsers_UpdatedAt");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("ASP.NET Core Identity ユーザー情報とカスタムプロフィール");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.Domain", b =>
                {
                    b.Property<long>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ドメインID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DomainId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("ドメイン説明");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("ドメイン名（プロジェクト内一意）");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("論理削除フラグ（false:有効、true:削除済み）");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasComment("所属プロジェクトID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.HasKey("DomainId");

                    b.HasIndex("DomainName")
                        .HasDatabaseName("IX_Domains_DomainName");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Domains_IsDeleted");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_Domains_ProjectId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Domains_UpdatedAt");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Domains", null, t =>
                        {
                            t.HasComment("プロジェクト内ドメイン分類と承認権限の管理単位");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.DomainApprover", b =>
                {
                    b.Property<long>("DomainApproverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ドメイン承認者ID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DomainApproverId"));

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("承認者ユーザーID（外部キー）");

                    b.Property<long>("DomainId")
                        .HasColumnType("bigint")
                        .HasComment("ドメインID（外部キー）");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.HasKey("DomainApproverId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("DomainId", "ApproverId")
                        .IsUnique()
                        .HasDatabaseName("IX_DomainApprovers_DomainId_ApproverId_Unique");

                    b.ToTable("DomainApprovers", null, t =>
                        {
                            t.HasComment("ドメイン別承認権限の管理、承認者とドメインの多対多関連");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.DraftUbiquitousLang", b =>
                {
                    b.Property<long>("DraftUbiquitousLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ドラフトユビキタス言語ID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DraftUbiquitousLangId"));

                    b.Property<string>("ApplicantId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("申請者ユーザーID");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("timestamptz")
                        .HasComment("申請日時");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("意味・説明（改行可能）");

                    b.Property<long>("DomainId")
                        .HasColumnType("bigint")
                        .HasComment("所属ドメインID（外部キー）");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("英名");

                    b.Property<string>("JapaneseName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("和名");

                    b.Property<string>("OccurrenceContext")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("発生機会");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text")
                        .HasComment("却下理由");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasComment("備考（改行可能）");

                    b.Property<long?>("SourceFormalUbiquitousLangId")
                        .HasColumnType("bigint")
                        .HasComment("編集元正式ユビキタス言語ID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Draft")
                        .HasComment("ステータス（Draft/PendingApproval）");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.HasKey("DraftUbiquitousLangId");

                    b.HasIndex("ApplicantId")
                        .HasDatabaseName("IX_DraftUbiquitousLang_ApplicantId");

                    b.HasIndex("DomainId")
                        .HasDatabaseName("IX_DraftUbiquitousLang_DomainId");

                    b.HasIndex("JapaneseName")
                        .HasDatabaseName("IX_DraftUbiquitousLang_JapaneseName");

                    b.HasIndex("SourceFormalUbiquitousLangId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_DraftUbiquitousLang_Status");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_DraftUbiquitousLang_UpdatedAt");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DraftUbiquitousLang", null, t =>
                        {
                            t.HasComment("編集中・承認申請中のドラフトユビキタス言語管理");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.DraftUbiquitousLangRelation", b =>
                {
                    b.Property<long>("DraftUbiquitousLangRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ドラフト関連ID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DraftUbiquitousLangRelationId"));

                    b.Property<long>("DraftUbiquitousLangId")
                        .HasColumnType("bigint")
                        .HasComment("ドラフトユビキタス言語ID");

                    b.Property<long>("FormalUbiquitousLangId")
                        .HasColumnType("bigint")
                        .HasComment("関連正式ユビキタス言語ID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.HasKey("DraftUbiquitousLangRelationId");

                    b.HasIndex("FormalUbiquitousLangId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("DraftUbiquitousLangId", "FormalUbiquitousLangId")
                        .IsUnique()
                        .HasDatabaseName("IX_DraftUbiquitousLangRelation_Draft_Formal_Unique");

                    b.ToTable("DraftUbiquitousLangRelations", null, t =>
                        {
                            t.HasComment("ドラフトユビキタス言語と正式ユビキタス言語間の関連性管理");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLang", b =>
                {
                    b.Property<long>("FormalUbiquitousLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("正式ユビキタス言語ID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FormalUbiquitousLangId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("意味・説明（改行可能）");

                    b.Property<long>("DomainId")
                        .HasColumnType("bigint")
                        .HasComment("所属ドメインID（外部キー）");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("英名");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("論理削除フラグ（false:有効、true:削除済み）");

                    b.Property<string>("JapaneseName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("和名（ドメイン内一意）");

                    b.Property<string>("OccurrenceContext")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("発生機会");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasComment("備考（改行可能）");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.HasKey("FormalUbiquitousLangId");

                    b.HasIndex("DomainId")
                        .HasDatabaseName("IX_FormalUbiquitousLang_DomainId");

                    b.HasIndex("EnglishName")
                        .HasDatabaseName("IX_FormalUbiquitousLang_EnglishName");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_FormalUbiquitousLang_IsDeleted");

                    b.HasIndex("JapaneseName")
                        .HasDatabaseName("IX_FormalUbiquitousLang_JapaneseName");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_FormalUbiquitousLang_UpdatedAt");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FormalUbiquitousLang", null, t =>
                        {
                            t.HasComment("承認済み正式ユビキタス言語の管理、Claude Code出力対象データ");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLangHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("履歴ID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("HistoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("意味・説明（改行可能）");

                    b.Property<long>("DomainId")
                        .HasColumnType("bigint")
                        .HasComment("所属ドメインID（外部キー）");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("英名");

                    b.Property<long>("FormalUbiquitousLangId")
                        .HasColumnType("bigint")
                        .HasComment("元の正式ユビキタス言語ID");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("論理削除フラグ（false:有効、true:削除済み）");

                    b.Property<string>("JapaneseName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("和名");

                    b.Property<string>("OccurrenceContext")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("発生機会");

                    b.Property<string>("RelatedUbiquitousLangSnapshot")
                        .HasColumnType("jsonb")
                        .HasComment("関連ユビキタス言語スナップショット（JSONB、GINインデックス対応）");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasComment("備考（改行可能）");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.HasKey("HistoryId");

                    b.HasIndex("DomainId")
                        .HasDatabaseName("IX_FormalUbiquitousLangHistory_DomainId");

                    b.HasIndex("FormalUbiquitousLangId")
                        .HasDatabaseName("IX_FormalUbiquitousLangHistory_FormalUbiquitousLangId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_FormalUbiquitousLangHistory_IsDeleted");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_FormalUbiquitousLangHistory_UpdatedAt");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FormalUbiquitousLangHistory", null, t =>
                        {
                            t.HasComment("正式ユビキタス言語の変更履歴管理、JSONB活用でスナップショット保存");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.Project", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("プロジェクトID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProjectId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasComment("プロジェクト説明");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("論理削除フラグ（false:有効、true:削除済み）");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("プロジェクト名（システム内一意）");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.HasKey("ProjectId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Projects_IsDeleted");

                    b.HasIndex("ProjectName")
                        .HasDatabaseName("IX_Projects_ProjectName");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Projects_UpdatedAt");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Projects", null, t =>
                        {
                            t.HasComment("プロジェクト情報の管理とユーザー・ドメインとの関連制御");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.RelatedUbiquitousLang", b =>
                {
                    b.Property<long>("RelatedUbiquitousLangId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("関連ユビキタス言語ID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RelatedUbiquitousLangId"));

                    b.Property<long>("SourceUbiquitousLangId")
                        .HasColumnType("bigint")
                        .HasComment("関連元ユビキタス言語ID");

                    b.Property<long>("TargetUbiquitousLangId")
                        .HasColumnType("bigint")
                        .HasComment("関連先ユビキタス言語ID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.HasKey("RelatedUbiquitousLangId");

                    b.HasIndex("TargetUbiquitousLangId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("SourceUbiquitousLangId", "TargetUbiquitousLangId")
                        .IsUnique()
                        .HasDatabaseName("IX_RelatedUbiquitousLang_Source_Target_Unique");

                    b.ToTable("RelatedUbiquitousLang", null, t =>
                        {
                            t.HasComment("ユビキタス言語間の関連性管理、多対多関連");
                        });
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.UserProject", b =>
                {
                    b.Property<long>("UserProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("ユーザープロジェクトID（主キー）");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserProjectId"));

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasComment("プロジェクトID（外部キー）");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasComment("最終更新日時（タイムゾーン付き）");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("最終更新者ユーザーID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasComment("ユーザーID（外部キー）");

                    b.HasKey("UserProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserProjects_UserId_ProjectId_Unique");

                    b.ToTable("UserProjects", null, t =>
                        {
                            t.HasComment("ユーザーとプロジェクトの多対多関連を管理、権限制御の基盤");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.Domain", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.Project", "Project")
                        .WithMany("Domains")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.DomainApprover", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "Approver")
                        .WithMany("DomainApprovers")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.Domain", "Domain")
                        .WithMany("DomainApprovers")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Domain");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.DraftUbiquitousLang", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.Domain", "Domain")
                        .WithMany("DraftUbiquitousLangs")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLang", "SourceFormalUbiquitousLang")
                        .WithMany()
                        .HasForeignKey("SourceFormalUbiquitousLangId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Domain");

                    b.Navigation("SourceFormalUbiquitousLang");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.DraftUbiquitousLangRelation", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.DraftUbiquitousLang", "DraftUbiquitousLang")
                        .WithMany("DraftRelations")
                        .HasForeignKey("DraftUbiquitousLangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLang", "FormalUbiquitousLang")
                        .WithMany("DraftRelations")
                        .HasForeignKey("FormalUbiquitousLangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DraftUbiquitousLang");

                    b.Navigation("FormalUbiquitousLang");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLang", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.Domain", "Domain")
                        .WithMany("FormalUbiquitousLangs")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLangHistory", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLang", "FormalUbiquitousLang")
                        .WithMany("Histories")
                        .HasForeignKey("FormalUbiquitousLangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("FormalUbiquitousLang");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.Project", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.RelatedUbiquitousLang", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLang", "SourceUbiquitousLang")
                        .WithMany("SourceRelations")
                        .HasForeignKey("SourceUbiquitousLangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLang", "TargetUbiquitousLang")
                        .WithMany("TargetRelations")
                        .HasForeignKey("TargetUbiquitousLangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceUbiquitousLang");

                    b.Navigation("TargetUbiquitousLang");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.UserProject", b =>
                {
                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("DomainApprovers");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.Domain", b =>
                {
                    b.Navigation("DomainApprovers");

                    b.Navigation("DraftUbiquitousLangs");

                    b.Navigation("FormalUbiquitousLangs");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.DraftUbiquitousLang", b =>
                {
                    b.Navigation("DraftRelations");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.FormalUbiquitousLang", b =>
                {
                    b.Navigation("DraftRelations");

                    b.Navigation("Histories");

                    b.Navigation("SourceRelations");

                    b.Navigation("TargetRelations");
                });

            modelBuilder.Entity("UbiquitousLanguageManager.Infrastructure.Data.Entities.Project", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("UserProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
